import { AdvancedAnalysisService } from './integrations/AdvancedAnalysisService';
import { userResponses } from './responses'; // Assumindo que este ficheiro existe com as respostas

// Configure as suas vari√°veis de ambiente para o script Node.js
process.env.VITE_GEMINI_API_KEY = 'AIzaSyAN3lGIldKCCmN-TC_c0PklZlqxF1PdlDM';
// Adicione outras chaves de API se forem necess√°rias.

async function runManualGeneration() {
  try {
    console.log('üöÄ Iniciando a gera√ß√£o do MANUAL DE PERSONIFICA√á√ÉO com 6 respostas...');

    const userEmail = 'vileproj10@gmail.com';

    // MODIFICA√á√ÉO: Alterado o requisito de 108 para 6 respostas para for√ßar a an√°lise completa.
    if (!userResponses || userResponses.length < 6) {
        throw new Error(`A an√°lise completa requer no m√≠nimo 6 respostas para este teste. O ficheiro 'responses.ts' forneceu ${userResponses?.length || 0}.`);
    }

    // Garante que estamos a usar apenas as 6 primeiras respostas.
    const responsesForAnalysis = userResponses.slice(0, 6);

    // Simula a formata√ß√£o das respostas como viriam da aplica√ß√£o real.
    const formattedResponses = responsesForAnalysis.map((response, index) => ({
      question_index: index + 1,
      // IMPORTANTE: O dom√≠nio da pergunta √© crucial para a an√°lise.
      question_domain: 'Identidade & Narrativa', // Exemplo de dom√≠nio
      question_text: `Pergunta Simulada ${index + 1}`,
      transcript_text: response,
    }));

    // 1. Instanciar o servi√ßo de an√°lise avan√ßada.
    const analysisService = new AdvancedAnalysisService();

    // 2. Montar o pedido para a an√°lise completa.
    const request = {
      userEmail: userEmail,
      responses: formattedResponses,
      audioFiles: [] // Nenhum ficheiro de √°udio neste teste.
    };

    // 3. Chamar o m√©todo principal que gera o manual completo.
    const personificationManual = await analysisService.generatePersonificationManual(request);

    // 4. Exibir o resultado final e completo de forma estruturada.
    console.log('\n\n--- üìñ MANUAL DE PERSONIFICA√á√ÉO GERADO (COM 6 RESPOSTAS) ---');
    console.dir(personificationManual, { depth: null });
    console.log('--- FIM DO MANUAL ---');

    console.log('\n‚úÖ Gera√ß√£o do manual conclu√≠da com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro cr√≠tico durante a gera√ß√£o do manual:', error);
  }
}

// Executa a fun√ß√£o principal.
runManualGeneration();
