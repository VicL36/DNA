import { supabase } from '@/lib/supabase'

export interface SupabaseStorageConfig {
  bucketName: string
  baseUrl: string
}

export interface StorageUploadResponse {
  fileId: string
  fileName: string
  fileUrl: string
  publicUrl: string
  downloadUrl: string
}

export class SupabaseStorageService {
  private config: SupabaseStorageConfig

  constructor() {
    this.config = {
      bucketName: 'dna-protocol-files', // Bucket principal para todos os arquivos
      baseUrl: import.meta.env.VITE_SUPABASE_URL || ''
    }

    console.log('üîß Configurando Supabase Storage Service...')
    console.log('ü™£ Bucket Name:', this.config.bucketName)
    console.log('üîó Base URL:', this.config.baseUrl?.substring(0, 30) + '...')
  }

  // Criar pasta para o usu√°rio (estrutura de pastas no Storage)
  private getUserFolderPath(userEmail: string): string {
    const sanitizedEmail = userEmail.replace('@', '_').replace(/\./g, '_')
    return `users/${sanitizedEmail}`
  }

  // Upload de arquivo de √°udio
  async uploadAudioFile(
    file: File,
    userEmail: string,
    questionIndex: number,
    questionText: string
  ): Promise<StorageUploadResponse> {
    try {
      console.log('üéµ Iniciando upload de √°udio para Supabase Storage...')
      console.log('üìÑ Arquivo:', file.name, 'Tamanho:', file.size, 'bytes')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `Q${questionIndex.toString().padStart(3, '0')}_AUDIO_${timestamp}.wav`
      const filePath = `${userFolderPath}/audio/${fileName}`

      console.log('üì§ Fazendo upload do √°udio para:', filePath)

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'audio/wav'
        })

      if (error) {
        console.error('‚ùå Erro no upload do √°udio:', error)
        throw new Error(`Erro no upload do √°udio: ${error.message}`)
      }

      // Obter URL p√∫blica do arquivo
      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ √Åudio enviado com sucesso para Supabase Storage!')
      console.log('üìÅ Path:', data.path)
      console.log('üîó URL:', publicUrlData.publicUrl)

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro no upload do √°udio:', error)
      throw new Error(`Falha no upload do √°udio: ${error.message}`)
    }
  }

  // Upload de transcri√ß√£o
  async uploadTranscription(
    transcription: string,
    userEmail: string,
    questionIndex: number,
    questionText: string
  ): Promise<StorageUploadResponse> {
    try {
      console.log('üìù Enviando transcri√ß√£o para Supabase Storage...')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `Q${questionIndex.toString().padStart(3, '0')}_TRANSCRICAO_${timestamp}.txt`
      const filePath = `${userFolderPath}/transcriptions/${fileName}`

      const content = `DNA UP - An√°lise Narrativa Profunda
Data: ${new Date().toLocaleString('pt-BR')}
Usu√°rio: ${userEmail}
Pergunta ${questionIndex}: ${questionText}

TRANSCRI√á√ÉO:
${transcription}

---
Gerado automaticamente pelo DNA UP Platform
`

      const blob = new Blob([content], { type: 'text/plain; charset=utf-8' })

      console.log('üì§ Fazendo upload da transcri√ß√£o para:', filePath)

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, blob, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'text/plain'
        })

      if (error) {
        console.error('‚ùå Erro no upload da transcri√ß√£o:', error)
        throw new Error(`Erro no upload da transcri√ß√£o: ${error.message}`)
      }

      // Obter URL p√∫blica do arquivo
      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ Transcri√ß√£o enviada com sucesso para Supabase Storage!')
      console.log('üìÅ Path:', data.path)

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro ao enviar transcri√ß√£o:', error)
      throw new Error(`Falha no upload da transcri√ß√£o: ${error.message}`)
    }
  }

  // Upload do dataset de fine-tuning
  async uploadFineTuningDataset(
    dataset: any,
    userEmail: string
  ): Promise<StorageUploadResponse> {
    try {
      console.log('ü§ñ Enviando dataset de fine-tuning para Supabase Storage...')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `DNA_UP_FINE_TUNING_DATASET_${timestamp}.jsonl`
      const filePath = `${userFolderPath}/datasets/${fileName}`

      // Converter dataset para formato JSONL (cada linha √© um JSON)
      const jsonlContent = dataset.map(item => JSON.stringify(item)).join('\n')

      const blob = new Blob([jsonlContent], { type: 'application/jsonl' })

      console.log('üì§ Fazendo upload do dataset para:', filePath)

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, blob, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'application/jsonl'
        })

      if (error) {
        console.error('‚ùå Erro no upload do dataset:', error)
        throw new Error(`Erro no upload do dataset: ${error.message}`)
      }

      // Obter URL p√∫blica do arquivo
      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ Dataset de fine-tuning enviado com sucesso!')
      console.log('üìÅ Path:', data.path)

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro ao enviar dataset:', error)
      throw new Error(`Falha no upload do dataset: ${error.message}`)
    }
  }

  // Upload do relat√≥rio final
  async uploadFinalReport(
    userEmail: string,
    analysisData: any,
    responses: any[]
  ): Promise<StorageUploadResponse> {
    try {
      console.log('üìä Gerando relat√≥rio final completo...')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `DNA_UP_RELATORIO_COMPLETO_${timestamp}.txt`
      const filePath = `${userFolderPath}/reports/${fileName}`

      const content = `
# DNA UP - RELAT√ìRIO DE AN√ÅLISE PSICOL√ìGICA COMPLETA

**Data:** ${new Date().toLocaleString('pt-BR')}
**Usu√°rio:** ${userEmail}
**Total de Respostas:** ${responses.length}
**Protocolo:** Clara R. - 108 Perguntas Estrat√©gicas

---

## AN√ÅLISE PSICOL√ìGICA

${analysisData.analysis_document || 'An√°lise em processamento...'}

---

## RESUMO EXECUTIVO

${analysisData.personality_summary || 'Resumo em processamento...'}

---

## INSIGHTS PRINCIPAIS

${analysisData.key_insights?.map((insight, i) => `${i + 1}. ${insight}`).join('\n') || 'Insights em processamento...'}

---

## PADR√ïES COMPORTAMENTAIS

${analysisData.behavioral_patterns?.map((pattern, i) => `${i + 1}. ${pattern}`).join('\n') || 'Padr√µes em processamento...'}

---

## RECOMENDA√á√ïES

${analysisData.recommendations || 'Recomenda√ß√µes em processamento...'}

---

## AN√ÅLISE POR DOM√çNIO

${Object.entries(analysisData.domain_analysis || {}).map(([domain, score]) => `**${domain}:** ${score}`).join('\n')}

---

## RESPOSTAS DETALHADAS

${responses.map((response, i) => `
### PERGUNTA ${response.question_index}
**Dom√≠nio:** ${response.question_domain}
**Pergunta:** ${response.question_text}
**Resposta:** ${response.transcript_text || 'Transcri√ß√£o n√£o dispon√≠vel'}
**Dura√ß√£o:** ${Math.round(response.audio_duration || 0)}s
**Data:** ${new Date(response.created_at).toLocaleString('pt-BR')}

---
`).join('\n')}

---

**Relat√≥rio gerado automaticamente pelo DNA UP Platform**
**Deep Narrative Analysis - Protocolo Clara R.**
**¬© 2024 DNA UP - Todos os direitos reservados**
`

      const blob = new Blob([content], { type: 'text/plain; charset=utf-8' })

      console.log('üì§ Fazendo upload do relat√≥rio final para:', filePath)

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, blob, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'text/plain'
        })

      if (error) {
        console.error('‚ùå Erro no upload do relat√≥rio:', error)
        throw new Error(`Erro no upload do relat√≥rio: ${error.message}`)
      }

      // Obter URL p√∫blica do arquivo
      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ Relat√≥rio final enviado com sucesso!')
      console.log('üìÅ Path:', data.path)

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro ao gerar relat√≥rio final:', error)
      throw new Error(`Falha ao gerar relat√≥rio: ${error.message}`)
    }
  }

  // Verificar se est√° configurado
  isConfigured(): boolean {
    return !!(
      this.config.bucketName &&
      this.config.baseUrl
    )
  }

  // Info de configura√ß√£o
  getConfigInfo() {
    return {
      hasBucketName: !!this.config.bucketName,
      hasBaseUrl: !!this.config.baseUrl,
      isConfigured: this.isConfigured()
    }
  }

  // Listar arquivos de um usu√°rio
  async listUserFiles(userEmail: string, folder?: string): Promise<any[]> {
    try {
      const userFolderPath = this.getUserFolderPath(userEmail)
      const searchPath = folder ? `${userFolderPath}/${folder}` : userFolderPath

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .list(searchPath)

      if (error) {
        console.error('‚ùå Erro ao listar arquivos:', error)
        return []
      }

      return data || []
    } catch (error) {
      console.error('‚ùå Erro ao listar arquivos:', error)
      return []
    }
  }

  // Deletar arquivo
  async deleteFile(filePath: string): Promise<boolean> {
    try {
      const { error } = await supabase.storage
        .from(this.config.bucketName)
        .remove([filePath])

      if (error) {
        console.error('‚ùå Erro ao deletar arquivo:', error)
        return false
      }

      console.log('‚úÖ Arquivo deletado com sucesso:', filePath)
      return true
    } catch (error) {
      console.error('‚ùå Erro ao deletar arquivo:', error)
      return false
    }
  }

  // Obter URL de download de um arquivo
  async getDownloadUrl(filePath: string): Promise<string | null> {
    try {
      const { data } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      return data.publicUrl
    } catch (error) {
      console.error('‚ùå Erro ao obter URL de download:', error)
      return null
    }
  }

  // Upload de relat√≥rio avan√ßado (incluindo an√°lise psicol√≥gica completa)
  async uploadAdvancedReport(
    userEmail: string,
    analysisData: any,
    responses: any[],
    advancedAnalysis?: any
  ): Promise<StorageUploadResponse> {
    try {
      console.log('üìä Gerando relat√≥rio avan√ßado para Supabase Storage...')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `DNA_UP_RELATORIO_AVANCADO_${timestamp}.md`
      const filePath = `${userFolderPath}/reports/${fileName}`

      // Gerar conte√∫do do relat√≥rio avan√ßado
      const reportContent = this.generateAdvancedReportContent(
        userEmail,
        analysisData,
        responses,
        advancedAnalysis
      )

      const reportBlob = new Blob([reportContent], { type: 'text/markdown' })

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, reportBlob, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'text/markdown'
        })

      if (error) {
        console.error('‚ùå Erro no upload do relat√≥rio avan√ßado:', error)
        throw new Error(`Erro no upload do relat√≥rio: ${error.message}`)
      }

      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ Relat√≥rio avan√ßado salvo no Supabase Storage!')

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro no upload do relat√≥rio avan√ßado:', error)
      throw new Error(`Falha no upload do relat√≥rio: ${error.message}`)
    }
  }

  // Upload de dados para clonagem de voz (AllTalk TTS)
  async uploadVoiceCloningData(
    voiceCloningData: any[],
    userEmail: string
  ): Promise<StorageUploadResponse> {
    try {
      console.log('üé§ Salvando dados de clonagem de voz para AllTalk TTS...')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `DNA_UP_VOICE_CLONING_DATA_${timestamp}.json`
      const filePath = `${userFolderPath}/voice_cloning/${fileName}`

      // Preparar dados espec√≠ficos para AllTalk TTS
      const allTalkData = this.prepareAllTalkTTSData(voiceCloningData, userEmail)

      const dataBlob = new Blob([JSON.stringify(allTalkData, null, 2)], {
        type: 'application/json'
      })

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, dataBlob, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'application/json'
        })

      if (error) {
        console.error('‚ùå Erro no upload dos dados de voz:', error)
        throw new Error(`Erro no upload dos dados de voz: ${error.message}`)
      }

      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ Dados de clonagem de voz salvos no Supabase Storage!')

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro no upload dos dados de voz:', error)
      throw new Error(`Falha no upload dos dados de voz: ${error.message}`)
    }
  }

  // Gerar conte√∫do do relat√≥rio avan√ßado
  private generateAdvancedReportContent(
    userEmail: string,
    analysisData: any,
    responses: any[],
    advancedAnalysis?: any
  ): string {
    const timestamp = new Date().toISOString()
    const formattedDate = new Date().toLocaleString('pt-BR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })

    return `# DNA UP - RELAT√ìRIO PSICOL√ìGICO AVAN√áADO

## Informa√ß√µes Gerais
- **Data de Gera√ß√£o:** ${formattedDate}
- **Usu√°rio:** ${userEmail}
- **Total de Respostas:** ${responses.length}
- **Protocolo:** Clara R. - 108 Perguntas Estrat√©gicas
- **Vers√£o:** 2.0 (An√°lise Avan√ßada)

---

## üß† AN√ÅLISE PSICOL√ìGICA PROFUNDA

### Perfil Psicol√≥gico Principal
${analysisData.analysis_document || 'An√°lise em processamento...'}

### Estrutura de Personalidade
${analysisData.personality_summary || 'Resumo em processamento...'}

---

## üîç INSIGHTS ESTRAT√âGICOS

### Insights Principais
${analysisData.key_insights?.map((insight, i) => `${i + 1}. **${insight}**`).join('\n') || 'Insights em processamento...'}

### Padr√µes Comportamentais Identificados
${analysisData.behavioral_patterns?.map((pattern, i) => `${i + 1}. **${pattern}**`).join('\n') || 'Padr√µes em processamento...'}

---

## üìä AN√ÅLISE QUANTITATIVA POR DOM√çNIO

${Object.entries(analysisData.domain_analysis || {}).map(([domain, score]) => 
  `### ${domain}\n**Pontua√ß√£o:** ${score}/100\n**Avalia√ß√£o:** ${this.getDomainAssessment(score)}\n`
).join('\n')}

---

## üéØ RECOMENDA√á√ïES PERSONALIZADAS

### Desenvolvimento Pessoal
${analysisData.recommendations || 'Recomenda√ß√µes em processamento...'}

### √Åreas de Crescimento
${advancedAnalysis?.growth_areas?.map((area, i) => `${i + 1}. **${area}**`).join('\n') || 'An√°lise em processamento...'}

### Estrat√©gias de Melhoria
${advancedAnalysis?.improvement_strategies?.map((strategy, i) => `${i + 1}. **${strategy}**`).join('\n') || 'Estrat√©gias em processamento...'}

---

## üí° AN√ÅLISE COMPORTAMENTAL AVAN√áADA

### Motiva√ß√µes Intr√≠nsecas
${advancedAnalysis?.intrinsic_motivations?.join('\n- ') || 'Motiva√ß√µes em an√°lise...'}

### Padr√µes de Comunica√ß√£o
${advancedAnalysis?.communication_patterns?.join('\n- ') || 'Padr√µes em an√°lise...'}

### Estilo de Tomada de Decis√£o
${advancedAnalysis?.decision_making_style || 'Estilo em an√°lise...'}

---

## üìù RESPOSTAS DETALHADAS

${responses.map((response, i) => `
### PERGUNTA ${response.question_index}
**Dom√≠nio:** ${response.question_domain}
**Pergunta:** ${response.question_text}
**Resposta:** ${response.transcript_text || 'Transcri√ß√£o n√£o dispon√≠vel'}
**Dura√ß√£o:** ${Math.round(response.audio_duration || 0)}s
**Data:** ${new Date(response.created_at).toLocaleString('pt-BR')}
**An√°lise:** ${response.analysis_notes || 'An√°lise pendente'}

---
`).join('\n')}

---

## üî¨ METODOLOGIA

### Protocolo Aplicado
- **Base Cient√≠fica:** An√°lise Narrativa Profunda (DNA)
- **T√©cnica:** Clara R. - 108 Perguntas Estrat√©gicas
- **Processamento:** IA Avan√ßada + An√°lise Humana
- **Valida√ß√£o:** M√∫ltiplas camadas de verifica√ß√£o

### Ferramentas Utilizadas
- Transcri√ß√£o autom√°tica de alta precis√£o
- An√°lise sem√¢ntica avan√ßada
- Processamento de linguagem natural
- Algoritmos de detec√ß√£o de padr√µes
- An√°lise psicol√≥gica computacional

---

## ‚ö†Ô∏è CONSIDERA√á√ïES IMPORTANTES

### Limita√ß√µes
- Esta an√°lise √© baseada em respostas fornecidas em um momento espec√≠fico
- Resultados podem variar dependendo do contexto e estado emocional
- Recomenda-se acompanhamento profissional para quest√µes complexas

### Recomenda√ß√µes de Uso
- Utilize como ferramenta de autoconhecimento
- Compartilhe com profissionais qualificados quando necess√°rio
- Revise periodicamente para acompanhar evolu√ß√£o pessoal

---

**Relat√≥rio gerado automaticamente pelo DNA UP Platform**
**Deep Narrative Analysis - Protocolo Clara R.**
**¬© 2024 DNA UP - Todos os direitos reservados**
**Timestamp:** ${timestamp}
`
  }

  // Avaliar dom√≠nio baseado na pontua√ß√£o
  private getDomainAssessment(score: any): string {
    const numScore = typeof score === 'number' ? score : parseFloat(score) || 0
    
    if (numScore >= 80) return 'Excelente - √Årea de alta compet√™ncia'
    if (numScore >= 60) return 'Bom - √Årea desenvolvida com potencial'
    if (numScore >= 40) return 'Moderado - √Årea que requer aten√ß√£o'
    if (numScore >= 20) return 'Baixo - √Årea que necessita desenvolvimento'
    return 'Cr√≠tico - √Årea que requer interven√ß√£o imediata'
  }

  // Gerar insights padr√£o a partir do perfil de personalidade
  private generateInsightsFromProfile(personalityProfile: any): string {
    const insights = []
    
    if (personalityProfile.communicationStyle?.formality) {
      insights.push(`**Comunica√ß√£o ${personalityProfile.communicationStyle.formality}:** Demonstra adaptabilidade no estilo comunicativo`)
    }
    
    if (personalityProfile.thinkingPatterns?.approach) {
      insights.push(`**Abordagem ${personalityProfile.thinkingPatterns.approach}:** Processamento mental caracter√≠stico identificado`)
    }
    
    if (personalityProfile.emotionalResponse?.strongTriggers?.length > 0) {
      insights.push(`**Responsividade Emocional:** Padr√µes espec√≠ficos de ativa√ß√£o emocional detectados`)
    }
    
    if (personalityProfile.socialPosture?.orientation) {
      insights.push(`**Orienta√ß√£o Social ${personalityProfile.socialPosture.orientation}:** Prefer√™ncias de intera√ß√£o social bem definidas`)
    }
    
    return insights.length > 0 ? insights.join('\n') : 'Insights sendo processados com base no perfil identificado...'
  }

  // Gerar padr√µes padr√£o a partir do perfil de personalidade
  private generatePatternsFromProfile(personalityProfile: any): string {
    const patterns = []
    
    if (personalityProfile.communicationStyle?.directness) {
      patterns.push(`**Padr√£o Comunicativo:** Tend√™ncia √† comunica√ß√£o ${personalityProfile.communicationStyle.directness}`)
    }
    
    if (personalityProfile.thinkingPatterns?.structure) {
      patterns.push(`**Padr√£o de Pensamento:** Estrutura√ß√£o mental ${personalityProfile.thinkingPatterns.structure}`)
    }
    
    if (personalityProfile.emotionalResponse?.regulationStrategies?.length > 0) {
      patterns.push(`**Padr√£o de Regula√ß√£o Emocional:** Estrat√©gias consistentes de manejo emocional`)
    }
    
    if (personalityProfile.socialPosture?.leadershipStyle?.length > 0) {
      patterns.push(`**Padr√£o de Lideran√ßa:** Estilo caracter√≠stico de influ√™ncia e direcionamento`)
    }
    
    return patterns.length > 0 ? patterns.join('\n') : 'Padr√µes sendo identificados com base no perfil analisado...'
  }

  // Gerar √°reas de crescimento padr√£o
  private generateDefaultGrowthAreas(): string {
    return `1. **Autoconhecimento Cont√≠nuo:** Aprofundar a compreens√£o dos pr√≥prios padr√µes e motiva√ß√µes
2. **Intelig√™ncia Emocional:** Desenvolver maior consci√™ncia e regula√ß√£o emocional
3. **Comunica√ß√£o Efetiva:** Aprimorar habilidades de express√£o e escuta ativa
4. **Flexibilidade Cognitiva:** Expandir a capacidade de adapta√ß√£o a diferentes contextos
5. **Relacionamentos Interpessoais:** Fortalecer conex√µes e habilidades sociais`
  }

  // Gerar estrat√©gias de melhoria padr√£o
  private generateDefaultImprovementStrategies(): string {
    return `1. **Pr√°tica de Mindfulness:** Desenvolver maior consci√™ncia presente e autorregula√ß√£o
2. **Feedback Ativo:** Buscar e integrar feedback construtivo de pessoas confi√°veis
3. **Aprendizado Cont√≠nuo:** Investir em desenvolvimento pessoal e profissional regular
4. **Reflex√£o Estruturada:** Implementar pr√°ticas de journaling e autoan√°lise
5. **Experimenta√ß√£o Comportamental:** Testar novos padr√µes de comportamento em ambientes seguros`
  }

  // Gerar motiva√ß√µes padr√£o
  private generateDefaultMotivations(): string {
    return `- Busca por crescimento pessoal e desenvolvimento cont√≠nuo
- Necessidade de contribui√ß√£o significativa e impacto positivo
- Valoriza√ß√£o da autonomia e liberdade de escolha
- Desejo de conex√µes aut√™nticas e relacionamentos profundos
- Aspira√ß√£o por maestria e excel√™ncia em √°reas de interesse`
  }

  // Gerar padr√µes de comunica√ß√£o padr√£o
  private generateDefaultCommunicationPatterns(): string {
    return `- Estilo adaptativo que se ajusta ao contexto e audi√™ncia
- Prefer√™ncia por comunica√ß√£o clara e direta quando apropriado
- Tend√™ncia a buscar compreens√£o m√∫tua em intera√ß√µes
- Capacidade de equilibrar assertividade com empatia
- Habilidade de modular o n√≠vel t√©cnico conforme necess√°rio`
  }
  // Preparar dados espec√≠ficos para AllTalk TTS
  private prepareAllTalkTTSData(voiceCloningData: any[], userEmail: string): any {
    const timestamp = new Date().toISOString()
    
    return {
      user_email: userEmail,
      created_at: timestamp,
      voice_profile: {
        name: `DNA_UP_${userEmail.replace('@', '_').replace(/\./g, '_')}`,
        description: 'Perfil de voz gerado pelo DNA UP Platform',
        language: 'pt-BR',
        gender: 'auto-detect',
        age_range: 'auto-detect'
      },
      audio_samples: voiceCloningData.map((sample, index) => ({
        id: `sample_${index + 1}`,
        file_name: sample.fileName || `audio_${index + 1}.wav`,
        file_url: sample.fileUrl || sample.publicUrl,
        duration: sample.duration || 0,
        transcription: sample.transcription || '',
        question_index: sample.questionIndex || index + 1,
        quality_score: sample.qualityScore || 0.8,
        emotion_tag: sample.emotionTag || 'neutral',
        energy_level: sample.energyLevel || 'medium'
      })),
      training_config: {
        model_type: 'alltalk_tts',
        training_steps: 1000,
        learning_rate: 0.0001,
        batch_size: 16,
        voice_fidelity: 'high',
        naturalness: 'high',
        pronunciation_accuracy: 'high'
      },
      quality_metrics: {
        total_samples: voiceCloningData.length,
        total_duration: voiceCloningData.reduce((sum, sample) => sum + (sample.duration || 0), 0),
        average_quality: voiceCloningData.reduce((sum, sample) => sum + (sample.qualityScore || 0.8), 0) / voiceCloningData.length,
        recommended_training: voiceCloningData.length >= 20 ? 'full' : 'basic'
      },
      metadata: {
        platform: 'DNA UP',
        version: '2.0',
        protocol: 'Clara R. - 108 Perguntas',
        processing_date: timestamp,
        generated_by: 'DNA UP Platform'
      }
    }
  }
}

// Inst√¢ncia singleton
export const supabaseStorageService = new SupabaseStorageService()
