// Servi√ßo REAL de Supabase Storage - DNA UP Platform
import { supabase } from '@/lib/supabase'

export interface SupabaseStorageConfig {
  bucketName: string
  baseUrl: string
}

export interface StorageUploadResponse {
  fileId: string
  fileName: string
  fileUrl: string
  publicUrl: string
  downloadUrl: string
}

export class SupabaseStorageService {
  private config: SupabaseStorageConfig

  constructor() {
    this.config = {
      bucketName: 'dna-protocol-files', // Bucket principal para todos os arquivos
      baseUrl: import.meta.env.VITE_SUPABASE_URL || ''
    }

    console.log('üîß Configurando Supabase Storage Service...')
    console.log('ü™£ Bucket Name:', this.config.bucketName)
    console.log('üîó Base URL:', this.config.baseUrl?.substring(0, 30) + '...')
  }

  // Criar pasta para o usu√°rio (estrutura de pastas no Storage)
  private getUserFolderPath(userEmail: string): string {
    const sanitizedEmail = userEmail.replace('@', '_').replace(/\./g, '_')
    return `users/${sanitizedEmail}`
  }

  // Upload de arquivo de √°udio
  async uploadAudioFile(
    file: File, 
    userEmail: string, 
    questionIndex: number,
    questionText: string
  ): Promise<StorageUploadResponse> {
    try {
      console.log('üéµ Iniciando upload de √°udio para Supabase Storage...')
      console.log('üìÑ Arquivo:', file.name, 'Tamanho:', file.size, 'bytes')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `Q${questionIndex.toString().padStart(3, '0')}_AUDIO_${timestamp}.wav`
      const filePath = `${userFolderPath}/audio/${fileName}`

      console.log('üì§ Fazendo upload do √°udio para:', filePath)

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'audio/wav'
        })

      if (error) {
        console.error('‚ùå Erro no upload do √°udio:', error)
        throw new Error(`Erro no upload do √°udio: ${error.message}`)
      }

      // Obter URL p√∫blica do arquivo
      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ √Åudio enviado com sucesso para Supabase Storage!')
      console.log('üìÅ Path:', data.path)
      console.log('üîó URL:', publicUrlData.publicUrl)

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro no upload do √°udio:', error)
      throw new Error(`Falha no upload do √°udio: ${error.message}`)
    }
  }

  // Upload de transcri√ß√£o
  async uploadTranscription(
    transcription: string,
    userEmail: string,
    questionIndex: number,
    questionText: string
  ): Promise<StorageUploadResponse> {
    try {
      console.log('üìù Enviando transcri√ß√£o para Supabase Storage...')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `Q${questionIndex.toString().padStart(3, '0')}_TRANSCRICAO_${timestamp}.txt`
      const filePath = `${userFolderPath}/transcriptions/${fileName}`
      
      const content = `DNA UP - An√°lise Narrativa Profunda
Data: ${new Date().toLocaleString('pt-BR')}
Usu√°rio: ${userEmail}
Pergunta ${questionIndex}: ${questionText}

TRANSCRI√á√ÉO:
${transcription}

---
Gerado automaticamente pelo DNA UP Platform
`

      const blob = new Blob([content], { type: 'text/plain; charset=utf-8' })

      console.log('üì§ Fazendo upload da transcri√ß√£o para:', filePath)

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, blob, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'text/plain'
        })

      if (error) {
        console.error('‚ùå Erro no upload da transcri√ß√£o:', error)
        throw new Error(`Erro no upload da transcri√ß√£o: ${error.message}`)
      }

      // Obter URL p√∫blica do arquivo
      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ Transcri√ß√£o enviada com sucesso para Supabase Storage!')
      console.log('üìÅ Path:', data.path)

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro ao enviar transcri√ß√£o:', error)
      throw new Error(`Falha no upload da transcri√ß√£o: ${error.message}`)
    }
  }

  // Upload do dataset de fine-tuning
  async uploadFineTuningDataset(
    dataset: any,
    userEmail: string
  ): Promise<StorageUploadResponse> {
    try {
      console.log('ü§ñ Enviando dataset de fine-tuning para Supabase Storage...')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `DNA_UP_FINE_TUNING_DATASET_${timestamp}.jsonl`
      const filePath = `${userFolderPath}/datasets/${fileName}`
      
      // Converter dataset para formato JSONL (cada linha √© um JSON)
      const jsonlContent = dataset.map(item => JSON.stringify(item)).join('\n')

      const blob = new Blob([jsonlContent], { type: 'application/jsonl' })

      console.log('üì§ Fazendo upload do dataset para:', filePath)

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, blob, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'application/jsonl'
        })

      if (error) {
        console.error('‚ùå Erro no upload do dataset:', error)
        throw new Error(`Erro no upload do dataset: ${error.message}`)
      }

      // Obter URL p√∫blica do arquivo
      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ Dataset de fine-tuning enviado com sucesso!')
      console.log('üìÅ Path:', data.path)

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro ao enviar dataset:', error)
      throw new Error(`Falha no upload do dataset: ${error.message}`)
    }
  }

  // Upload do relat√≥rio final
  async uploadFinalReport(
    userEmail: string,
    analysisData: any,
    responses: any[]
  ): Promise<StorageUploadResponse> {
    try {
      console.log('üìä Gerando relat√≥rio final completo...')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `DNA_UP_RELATORIO_COMPLETO_${timestamp}.txt`
      const filePath = `${userFolderPath}/reports/${fileName}`
      
      const content = `
# DNA UP - RELAT√ìRIO DE AN√ÅLISE PSICOL√ìGICA COMPLETA

**Data:** ${new Date().toLocaleString('pt-BR')}
**Usu√°rio:** ${userEmail}
**Total de Respostas:** ${responses.length}
**Protocolo:** Clara R. - 108 Perguntas Estrat√©gicas

---

## AN√ÅLISE PSICOL√ìGICA

${analysisData.analysis_document || 'An√°lise em processamento...'}

---

## RESUMO EXECUTIVO

${analysisData.personality_summary || 'Resumo em processamento...'}

---

## INSIGHTS PRINCIPAIS

${analysisData.key_insights?.map((insight, i) => `${i + 1}. ${insight}`).join('\n') || 'Insights em processamento...'}

---

## PADR√ïES COMPORTAMENTAIS

${analysisData.behavioral_patterns?.map((pattern, i) => `${i + 1}. ${pattern}`).join('\n') || 'Padr√µes em processamento...'}

---

## RECOMENDA√á√ïES

${analysisData.recommendations || 'Recomenda√ß√µes em processamento...'}

---

## AN√ÅLISE POR DOM√çNIO

${Object.entries(analysisData.domain_analysis || {}).map(([domain, score]) => `**${domain}:** ${score}`).join('\n')}

---

## RESPOSTAS DETALHADAS

${responses.map((response, i) => `
### PERGUNTA ${response.question_index}
**Dom√≠nio:** ${response.question_domain}
**Pergunta:** ${response.question_text}
**Resposta:** ${response.transcript_text || 'Transcri√ß√£o n√£o dispon√≠vel'}
**Dura√ß√£o:** ${Math.round(response.audio_duration || 0)}s
**Data:** ${new Date(response.created_at).toLocaleString('pt-BR')}

---
`).join('\n')}

---

**Relat√≥rio gerado automaticamente pelo DNA UP Platform**
**Deep Narrative Analysis - Protocolo Clara R.**
**¬© 2024 DNA UP - Todos os direitos reservados**
`

      const blob = new Blob([content], { type: 'text/plain; charset=utf-8' })

      console.log('üì§ Fazendo upload do relat√≥rio final para:', filePath)

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, blob, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'text/plain'
        })

      if (error) {
        console.error('‚ùå Erro no upload do relat√≥rio:', error)
        throw new Error(`Erro no upload do relat√≥rio: ${error.message}`)
      }

      // Obter URL p√∫blica do arquivo
      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ Relat√≥rio final enviado com sucesso!')
      console.log('üìÅ Path:', data.path)

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro ao gerar relat√≥rio final:', error)
      throw new Error(`Falha ao gerar relat√≥rio: ${error.message}`)
    }
  }

  // Verificar se est√° configurado
  isConfigured(): boolean {
    return !!(
      this.config.bucketName &&
      this.config.baseUrl
    )
  }

  // Info de configura√ß√£o
  getConfigInfo() {
    return {
      hasBucketName: !!this.config.bucketName,
      hasBaseUrl: !!this.config.baseUrl,
      isConfigured: this.isConfigured()
    }
  }

  // Listar arquivos de um usu√°rio
  async listUserFiles(userEmail: string, folder?: string): Promise<any[]> {
    try {
      const userFolderPath = this.getUserFolderPath(userEmail)
      const searchPath = folder ? `${userFolderPath}/${folder}` : userFolderPath

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .list(searchPath)

      if (error) {
        console.error('‚ùå Erro ao listar arquivos:', error)
        return []
      }

      return data || []
    } catch (error) {
      console.error('‚ùå Erro ao listar arquivos:', error)
      return []
    }
  }

  // Deletar arquivo
  async deleteFile(filePath: string): Promise<boolean> {
    try {
      const { error } = await supabase.storage
        .from(this.config.bucketName)
        .remove([filePath])

      if (error) {
        console.error('‚ùå Erro ao deletar arquivo:', error)
        return false
      }

      console.log('‚úÖ Arquivo deletado com sucesso:', filePath)
      return true
    } catch (error) {
      console.error('‚ùå Erro ao deletar arquivo:', error)
      return false
    }
  }

  // Obter URL de download de um arquivo
  async getDownloadUrl(filePath: string): Promise<string | null> {
    try {
      const { data } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      return data.publicUrl
    } catch (error) {
      console.error('‚ùå Erro ao obter URL de download:', error)
      return null
    }
  }
}

// Inst√¢ncia singleton
export const supabaseStorageService = new SupabaseStorageService()



  // Upload de relat√≥rio avan√ßado (incluindo an√°lise psicol√≥gica completa)
  async uploadAdvancedReport(
    userEmail: string,
    analysisData: any,
    responses: any[],
    advancedAnalysis?: any
  ): Promise<StorageUploadResponse> {
    try {
      console.log('üìä Gerando relat√≥rio avan√ßado para Supabase Storage...')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `DNA_UP_RELATORIO_AVANCADO_${timestamp}.md`
      const filePath = `${userFolderPath}/reports/${fileName}`

      // Gerar conte√∫do do relat√≥rio avan√ßado
      const reportContent = this.generateAdvancedReportContent(
        userEmail,
        analysisData,
        responses,
        advancedAnalysis
      )

      const reportBlob = new Blob([reportContent], { type: 'text/markdown' })

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, reportBlob, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'text/markdown'
        })

      if (error) {
        console.error('‚ùå Erro no upload do relat√≥rio avan√ßado:', error)
        throw new Error(`Erro no upload do relat√≥rio: ${error.message}`)
      }

      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ Relat√≥rio avan√ßado salvo no Supabase Storage!')

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro no upload do relat√≥rio avan√ßado:', error)
      throw new Error(`Falha no upload do relat√≥rio: ${error.message}`)
    }
  }

  // Upload de dados para clonagem de voz (AllTalk TTS)
  async uploadVoiceCloningData(
    voiceCloningData: any[],
    userEmail: string
  ): Promise<StorageUploadResponse> {
    try {
      console.log('üé§ Salvando dados de clonagem de voz para AllTalk TTS...')

      const userFolderPath = this.getUserFolderPath(userEmail)
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
      const fileName = `DNA_UP_VOICE_CLONING_DATA_${timestamp}.json`
      const filePath = `${userFolderPath}/voice_cloning/${fileName}`

      // Preparar dados espec√≠ficos para AllTalk TTS
      const allTalkData = this.prepareAllTalkTTSData(voiceCloningData, userEmail)

      const dataBlob = new Blob([JSON.stringify(allTalkData, null, 2)], { 
        type: 'application/json' 
      })

      const { data, error } = await supabase.storage
        .from(this.config.bucketName)
        .upload(filePath, dataBlob, {
          cacheControl: '3600',
          upsert: false,
          contentType: 'application/json'
        })

      if (error) {
        console.error('‚ùå Erro no upload dos dados de voz:', error)
        throw new Error(`Erro no upload dos dados de voz: ${error.message}`)
      }

      const { data: publicUrlData } = supabase.storage
        .from(this.config.bucketName)
        .getPublicUrl(filePath)

      console.log('‚úÖ Dados de clonagem de voz salvos no Supabase Storage!')

      return {
        fileId: data.path,
        fileName: fileName,
        fileUrl: publicUrlData.publicUrl,
        publicUrl: publicUrlData.publicUrl,
        downloadUrl: publicUrlData.publicUrl
      }

    } catch (error) {
      console.error('‚ùå Erro no upload dos dados de voz:', error)
      throw new Error(`Falha no upload dos dados de voz: ${error.message}`)
    }
  }

  // Gerar conte√∫do do relat√≥rio avan√ßado
  private generateAdvancedReportContent(
    userEmail: string,
    analysisData: any,
    responses: any[],
    advancedAnalysis?: any
  ): string {
    const timestamp = new Date().toLocaleString('pt-BR')
    const userName = userEmail.split('@')[0]

    return `# Relat√≥rio de An√°lise Psicol√≥gica Avan√ßada - DNA UP Platform

## Informa√ß√µes Gerais
- **Usu√°rio**: ${userName}
- **Email**: ${userEmail}
- **Data da An√°lise**: ${timestamp}
- **Total de Respostas**: ${responses.length}
- **Protocolo**: Clara R. (108 perguntas)

---

## Resumo Executivo

${advancedAnalysis?.behaviorModel?.condensedProfile || 'An√°lise psicol√≥gica baseada nas respostas fornecidas durante o protocolo Clara R.'}

---

## Perfil de Personalidade

### Estilo de Comunica√ß√£o
${advancedAnalysis?.personalityProfile ? `
- **Formalidade**: ${advancedAnalysis.personalityProfile.communicationStyle.formality}
- **Direcionamento**: ${advancedAnalysis.personalityProfile.communicationStyle.directness}
- **N√≠vel T√©cnico**: ${advancedAnalysis.personalityProfile.communicationStyle.technicalLevel}
- **Uso de Humor**: ${advancedAnalysis.personalityProfile.communicationStyle.humorUsage.frequency}
- **Express√µes Caracter√≠sticas**: ${advancedAnalysis.personalityProfile.communicationStyle.characteristicExpressions.join(', ')}
` : 'An√°lise de estilo de comunica√ß√£o n√£o dispon√≠vel.'}

### Padr√µes de Pensamento
${advancedAnalysis?.personalityProfile ? `
- **Estrutura**: ${advancedAnalysis.personalityProfile.thinkingPatterns.structure}
- **Abordagem**: ${advancedAnalysis.personalityProfile.thinkingPatterns.approach}
- **Abstra√ß√£o**: ${advancedAnalysis.personalityProfile.thinkingPatterns.abstraction}
- **Detalhamento**: ${advancedAnalysis.personalityProfile.thinkingPatterns.detail}
- **Velocidade**: ${advancedAnalysis.personalityProfile.thinkingPatterns.processingSpeed}
` : 'An√°lise de padr√µes de pensamento n√£o dispon√≠vel.'}

---

## Sistema de Cren√ßas e Valores

${advancedAnalysis?.beliefSystem ? `
### Valores Fundamentais
${advancedAnalysis.beliefSystem.fundamentalValues.map(v => `- ${v}`).join('\n')}

### Princ√≠pios √âticos
${advancedAnalysis.beliefSystem.ethicalPrinciples.map(p => `- ${p}`).join('\n')}

### Vis√£o de Mundo
- **Natureza Humana**: ${advancedAnalysis.beliefSystem.worldViews.humanNature}
- **Organiza√ß√µes**: ${advancedAnalysis.beliefSystem.worldViews.organizations}
- **Mudan√ßa e Progresso**: ${advancedAnalysis.beliefSystem.worldViews.changeAndProgress}
` : 'An√°lise de sistema de cren√ßas n√£o dispon√≠vel.'}

---

## Dom√≠nio de Conhecimento

${advancedAnalysis?.knowledgeDomain ? `
### √Åreas de Expertise
${advancedAnalysis.knowledgeDomain.expertiseAreas.map(a => `- ${a}`).join('\n')}

### Interesses Intelectuais
${advancedAnalysis.knowledgeDomain.intellectualInterests.map(i => `- ${i}`).join('\n')}
` : 'An√°lise de dom√≠nio de conhecimento n√£o dispon√≠vel.'}

---

## Padr√µes Lingu√≠sticos

${advancedAnalysis?.linguisticPatterns ? `
### Vocabul√°rio Caracter√≠stico
${advancedAnalysis.linguisticPatterns.characteristicVocabulary.map(v => `- ${v}`).join('\n')}

### Estrutura de Texto
- **Comprimento de Frases**: ${advancedAnalysis.linguisticPatterns.textStructure.sentenceLength}
- **Estilo de Par√°grafo**: ${advancedAnalysis.linguisticPatterns.textStructure.paragraphStyle}
` : 'An√°lise de padr√µes lingu√≠sticos n√£o dispon√≠vel.'}

---

## Prepara√ß√£o para Clonagem de Voz

${advancedAnalysis?.voiceCloningData ? `
### Arquivos de √Åudio Selecionados
Total de arquivos: ${advancedAnalysis.voiceCloningData.bestAudioFiles.length}

### Caracter√≠sticas Vocais
- **Tom**: ${advancedAnalysis.voiceCloningData.vocalCharacteristics.pitch}
- **Ritmo**: ${advancedAnalysis.voiceCloningData.vocalCharacteristics.pace}
- **Entona√ß√£o**: ${advancedAnalysis.voiceCloningData.vocalCharacteristics.intonation.join(', ')}

### Trejeitos Lingu√≠sticos
- **Sotaque**: ${advancedAnalysis.voiceCloningData.linguisticTreats.accent}
- **Preenchimentos**: ${advancedAnalysis.voiceCloningData.speechPatterns.fillers.join(', ')}
- **Frases Caracter√≠sticas**: ${advancedAnalysis.voiceCloningData.speechPatterns.characteristicPhrases.join(', ')}
` : 'Dados de clonagem de voz n√£o dispon√≠veis.'}

---

## Dataset de Fine-tuning

${advancedAnalysis?.fineTuningDataset ? `
- **Total de Exemplos**: ${advancedAnalysis.fineTuningDataset.length}
- **Formato**: JSONL para TinyLlama
- **Inclu√≠**: Instru√ß√µes, entradas e sa√≠das baseadas no perfil psicol√≥gico
` : 'Dataset de fine-tuning n√£o dispon√≠vel.'}

---

## Modelo Comportamental

${advancedAnalysis?.behaviorModel ? `
### Diretrizes de Resposta
- **T√≥picos de Engajamento**: ${advancedAnalysis.behaviorModel.responseGuidelines.engagementTopics?.join(', ') || 'N√£o especificado'}
- **T√≥picos de Cautela**: ${advancedAnalysis.behaviorModel.responseGuidelines.cautionTopics?.join(', ') || 'N√£o especificado'}
- **Estilo de Comunica√ß√£o**: ${advancedAnalysis.behaviorModel.responseGuidelines.communicationStyle?.join(', ') || 'N√£o especificado'}
` : 'Modelo comportamental n√£o dispon√≠vel.'}

---

## Confiabilidade da An√°lise

${advancedAnalysis ? `
- **Score de Confian√ßa**: ${(advancedAnalysis.confidenceScore * 100).toFixed(1)}%
- **Limita√ß√µes**: ${advancedAnalysis.limitations.join(', ')}
` : 'M√©tricas de confiabilidade n√£o dispon√≠veis.'}

---

## An√°lise B√°sica (Fallback)

${analysisData?.analysis_document || 'An√°lise b√°sica n√£o dispon√≠vel.'}

---

## Respostas Analisadas

${responses.map((r, i) => `
### Pergunta ${r.question_index}: ${r.question_domain}
**Pergunta**: ${r.question_text}
**Resposta**: ${r.transcript_text}
**Dura√ß√£o**: ${r.audio_duration ? `${r.audio_duration}s` : 'Texto'}
**Tom Emocional**: ${r.emotional_tone || 'N√£o especificado'}

---
`).join('')}

## Conclus√£o

Esta an√°lise psicol√≥gica avan√ßada fornece uma base s√≥lida para:
1. **Fine-tuning de IA**: Dataset personalizado para TinyLlama
2. **Clonagem de Voz**: Dados preparados para AllTalk TTS
3. **Compreens√£o Profunda**: Perfil psicol√≥gico detalhado
4. **Aplica√ß√µes Futuras**: Base para desenvolvimento de IA personalizada

---

*Relat√≥rio gerado automaticamente pelo DNA UP Platform*
*Tecnologias: Gemini AI, Deepgram, Supabase, AllTalk TTS*
`
  }

  // Preparar dados espec√≠ficos para AllTalk TTS
  private prepareAllTalkTTSData(voiceCloningData: any[], userEmail: string): any {
    const userName = userEmail.split('@')[0]
    
    return {
      // Metadados para AllTalk TTS
      metadata: {
        speaker_name: userName,
        language: 'pt-BR',
        gender: 'unknown', // Ser√° determinado pela an√°lise de voz
        age_range: 'adult',
        created_at: new Date().toISOString(),
        source: 'DNA UP Platform',
        protocol: 'Clara R.'
      },

      // Configura√ß√£o para AllTalk TTS
      alltalk_config: {
        model_type: 'voice_cloning',
        training_data_format: 'wav',
        sample_rate: 44100,
        bit_depth: 16,
        channels: 1,
        min_audio_length: 10, // segundos
        max_audio_length: 300, // segundos
        voice_similarity_threshold: 0.85
      },

      // Dados de clonagem de voz
      voice_cloning_data: voiceCloningData.length > 0 ? voiceCloningData[0] : {
        bestAudioFiles: [],
        vocalCharacteristics: {
          pitch: 'm√©dio',
          pace: 'moderado',
          rhythm: 'natural',
          intonation: ['expressiva']
        },
        emotionalMarkers: {
          excitement: ['tom mais alto'],
          contemplation: ['pausas reflexivas'],
          emphasis: ['repeti√ß√£o'],
          hesitation: ['pausas']
        },
        speechPatterns: {
          fillers: ['n√©', 'ent√£o'],
          pauses: ['reflexivas'],
          repetitions: ['para √™nfase'],
          characteristicPhrases: ['eu acho que']
        },
        linguisticTreats: {
          pronunciation: ['clara'],
          accent: 'brasileiro neutro',
          vocabulary: ['acess√≠vel'],
          grammar: ['correta']
        }
      },

      // Instru√ß√µes para AllTalk TTS
      training_instructions: {
        voice_description: `Voz de ${userName} extra√≠da do protocolo Clara R.`,
        training_steps: [
          '1. Carregar arquivos de √°udio selecionados',
          '2. Aplicar pr√©-processamento (normaliza√ß√£o, redu√ß√£o de ru√≠do)',
          '3. Extrair caracter√≠sticas vocais (pitch, timbre, ritmo)',
          '4. Treinar modelo de clonagem de voz',
          '5. Validar qualidade da s√≠ntese',
          '6. Ajustar par√¢metros conforme trejeitos identificados'
        ],
        quality_targets: {
          similarity_score: 0.90,
          naturalness_score: 0.85,
          intelligibility_score: 0.95
        }
      },

      // Scripts de exemplo para teste
      test_scripts: [
        'Ol√°, este √© um teste da minha voz clonada.',
        'Como voc√™ est√° hoje? Espero que esteja bem.',
        'Esta tecnologia √© realmente impressionante.',
        'Obrigado por participar do protocolo Clara R.',
        'At√© logo e tenha um √≥timo dia!'
      ],

      // Notas t√©cnicas
      technical_notes: [
        'Dados extra√≠dos de an√°lise psicol√≥gica completa',
        'Trejeitos de fala identificados automaticamente',
        'Caracter√≠sticas lingu√≠sticas mapeadas pelo Gemini AI',
        'Compat√≠vel com AllTalk TTS v1.0+',
        'Requer p√≥s-processamento para otimiza√ß√£o'
      ]
    }
  }
}

