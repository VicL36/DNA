// Servi√ßo de An√°lise Psicol√≥gica Avan√ßada - DNA UP Platform
export interface AdvancedAnalysisRequest {
  userEmail: string
  responses: any[]
  audioFiles: string[]
}

export interface PersonalityProfile {
  communicationStyle: {
    formality: 'formal' | 'informal' | 'mixed'
    directness: 'direct' | 'elaborative' | 'balanced'
    technicalLevel: 'technical' | 'accessible' | 'mixed'
    humorUsage: {
      frequency: 'high' | 'medium' | 'low'
      type: string[]
      contexts: string[]
    }
    characteristicExpressions: string[]
    syntacticPatterns: string[]
  }
  thinkingPatterns: {
    structure: 'linear' | 'non-linear' | 'mixed'
    approach: 'analytical' | 'intuitive' | 'balanced'
    abstraction: 'concrete' | 'abstract' | 'balanced'
    detail: 'detailed' | 'holistic' | 'balanced'
    processingSpeed: 'deliberate' | 'fast' | 'variable'
  }
  emotionalResponse: {
    strongTriggers: string[]
    stressPatterns: string[]
    regulationStrategies: string[]
    enthusiasmTriggers: string[]
  }
  socialPosture: {
    orientation: 'introverted' | 'extroverted' | 'ambivert'
    leadershipStyle: string[]
    conflictStyle: string[]
    interactionPreferences: string[]
  }
}

export interface BeliefSystem {
  fundamentalValues: string[]
  ethicalPrinciples: string[]
  worldViews: {
    humanNature: string
    organizations: string
    changeAndProgress: string
  }
  personalPhilosophy: {
    decisionMaking: string
    riskAttitude: string
    successDefinition: string
  }
  thoughtEvolution: {
    detectedChanges: string[]
    pivotalEvents: string[]
  }
}

export interface KnowledgeDomain {
  expertiseAreas: string[]
  intellectualInterests: string[]
  knowledgeGaps: string[]
  authorityTopics: string[]
  informationSources: string[]
}

export interface LinguisticPatterns {
  characteristicVocabulary: string[]
  semanticFields: string[]
  technicalTerms: string[]
  textStructure: {
    sentenceLength: 'short' | 'medium' | 'long' | 'varied'
    paragraphStyle: string
    argumentationPatterns: string[]
  }
  stylisticMarkers: {
    humor: string[]
    formality: string[]
    audienceAdaptation: string[]
  }
}

export interface VoiceCloningData {
  bestAudioFiles: string[]
  vocalCharacteristics: {
    pitch: string
    pace: string
    rhythm: string
    intonation: string[]
  }
  emotionalMarkers: {
    excitement: string[]
    contemplation: string[]
    emphasis: string[]
    hesitation: string[]
  }
  speechPatterns: {
    fillers: string[]
    pauses: string[]
    repetitions: string[]
    characteristicPhrases: string[]
  }
  linguisticTreats: {
    pronunciation: string[]
    accent: string
    vocabulary: string[]
    grammar: string[]
  }
}

export interface AdvancedAnalysisResult {
  personalityProfile: PersonalityProfile
  beliefSystem: BeliefSystem
  knowledgeDomain: KnowledgeDomain
  linguisticPatterns: LinguisticPatterns
  voiceCloningData: VoiceCloningData
  behaviorModel: {
    condensedProfile: string
    responseGuidelines: any
    dialogueExamples: any[]
  }
  fineTuningDataset: any[]
  confidenceScore: number
  limitations: string[]
}

export class AdvancedAnalysisService {
  private geminiApiKey: string

  constructor() {
    this.geminiApiKey = import.meta.env.VITE_GEMINI_API_KEY || ''
    console.log('üß† Inicializando Servi√ßo de An√°lise Avan√ßada...')
  }

  async performAdvancedAnalysis(request: AdvancedAnalysisRequest): Promise<AdvancedAnalysisResult> {
    try {
      console.log('üî¨ Iniciando an√°lise psicol√≥gica avan√ßada...')
      console.log(`üìä Analisando ${request.responses.length} respostas para ${request.userEmail}`)

      // Compilar todas as transcri√ß√µes para an√°lise
      const transcriptions = request.responses
        .sort((a, b) => a.question_index - b.question_index)
        .map(r => `PERGUNTA ${r.question_index}: ${r.question_text}\n\nRESPOSTA: ${r.transcript_text}`)
        .join('\n\n---\n\n')

      // Executar an√°lise em fases
      const personalityProfile = await this.analyzePersonalityProfile(transcriptions)
      const beliefSystem = await this.analyzeBeliefSystem(transcriptions)
      const knowledgeDomain = await this.analyzeKnowledgeDomain(transcriptions)
      const linguisticPatterns = await this.analyzeLinguisticPatterns(transcriptions)
      const voiceCloningData = await this.prepareVoiceCloningData(request.responses, request.audioFiles)
      const behaviorModel = await this.createBehaviorModel(transcriptions, personalityProfile, beliefSystem)
      const fineTuningDataset = await this.generateFineTuningDataset(request.userEmail, request.responses, personalityProfile, behaviorModel)

      const result: AdvancedAnalysisResult = {
        personalityProfile,
        beliefSystem,
        knowledgeDomain,
        linguisticPatterns,
        voiceCloningData,
        behaviorModel,
        fineTuningDataset,
        confidenceScore: 0.92,
        limitations: [
          'An√°lise baseada em respostas a perguntas espec√≠ficas',
          'Contexto limitado ao protocolo Clara R.',
          'Poss√≠vel vi√©s de auto-relato nas respostas'
        ]
      }

      console.log('‚úÖ An√°lise psicol√≥gica avan√ßada conclu√≠da!')
      return result

    } catch (error) {
      console.error('‚ùå Erro na an√°lise avan√ßada:', error)
      throw new Error(`Falha na an√°lise avan√ßada: ${error.message}`)
    }
  }

  private async analyzePersonalityProfile(transcriptions: string): Promise<PersonalityProfile> {
    const prompt = `
# An√°lise de Perfil de Personalidade - Protocolo Clara R.

Analise as seguintes respostas e extraia caracter√≠sticas detalhadas de personalidade:

${transcriptions}

## INSTRU√á√ïES:
Extraia informa√ß√µes espec√≠ficas para cada categoria abaixo, baseando-se EXCLUSIVAMENTE no conte√∫do fornecido:

### 1. ESTILO DE COMUNICA√á√ÉO
- Formalidade: formal, informal ou misto
- Direcionamento: direto, elaborativo ou equilibrado  
- N√≠vel t√©cnico: t√©cnico, acess√≠vel ou misto
- Uso de humor: frequ√™ncia, tipos, contextos
- Express√µes caracter√≠sticas e frases recorrentes
- Padr√µes sint√°ticos distintivos

### 2. PADR√ïES DE PENSAMENTO
- Estrutura: linear, n√£o-linear ou misto
- Abordagem: anal√≠tica, intuitiva ou equilibrada
- Abstra√ß√£o: concreto, abstrato ou equilibrado
- Detalhamento: detalhista, hol√≠stico ou equilibrado
- Velocidade de processamento: deliberado, r√°pido ou vari√°vel

### 3. RESPOSTA EMOCIONAL
- Temas que provocam respostas emocionais fortes
- Padr√µes de resposta a estresse ou press√£o
- Estrat√©gias de regula√ß√£o emocional observadas
- Temas que evocam entusiasmo ou engajamento

### 4. POSTURA SOCIAL
- Orienta√ß√£o: introvertida, extrovertida ou ambivalente
- Padr√µes de lideran√ßa ou colabora√ß√£o
- Estilo de conflito e negocia√ß√£o
- Prefer√™ncias de intera√ß√£o

Retorne a an√°lise em formato JSON estruturado com evid√™ncias espec√≠ficas das respostas.
`

    try {
      const response = await this.callGeminiAPI(prompt)
      return this.parsePersonalityProfile(response)
    } catch (error) {
      console.error('‚ùå Erro na an√°lise de personalidade:', error)
      return this.getDefaultPersonalityProfile()
    }
  }

  private async analyzeBeliefSystem(transcriptions: string): Promise<BeliefSystem> {
    const prompt = `
# An√°lise de Sistema de Cren√ßas e Valores

Analise as respostas e identifique o sistema de cren√ßas e valores da pessoa:

${transcriptions}

## EXTRAIA:

### 1. VALORES FUNDAMENTAIS
- Princ√≠pios √©ticos recorrentes
- Temas de justi√ßa, equidade, liberdade
- Compromissos morais expressos

### 2. CREN√áAS SOBRE O MUNDO
- Vis√µes sobre natureza humana
- Perspectivas sobre organiza√ß√µes e sistemas
- Cren√ßas sobre mudan√ßa e progresso

### 3. FILOSOFIA PESSOAL
- Abordagens √† tomada de decis√£o
- Atitudes em rela√ß√£o a risco e incerteza
- Perspectivas sobre sucesso e fracasso

### 4. EVOLU√á√ÉO DE PENSAMENTO
- Mudan√ßas detect√°veis em cren√ßas ao longo das respostas
- Eventos ou experi√™ncias que causaram mudan√ßas

Retorne em formato JSON com evid√™ncias espec√≠ficas.
`

    try {
      const response = await this.callGeminiAPI(prompt)
      return this.parseBeliefSystem(response)
    } catch (error) {
      console.error('‚ùå Erro na an√°lise de cren√ßas:', error)
      return this.getDefaultBeliefSystem()
    }
  }

  private async analyzeKnowledgeDomain(transcriptions: string): Promise<KnowledgeDomain> {
    const prompt = `
# An√°lise de Dom√≠nio de Conhecimento

Identifique as √°reas de conhecimento e expertise da pessoa:

${transcriptions}

## IDENTIFIQUE:

### 1. √ÅREAS DE EXPERTISE
- Dom√≠nios de conhecimento especializado
- T√≥picos sobre os quais fala com autoridade
- Refer√™ncias t√©cnicas utilizadas

### 2. INTERESSES INTELECTUAIS
- Temas recorrentes de curiosidade
- Padr√µes de explora√ß√£o de novos t√≥picos
- Fontes de informa√ß√£o preferidas

### 3. LACUNAS DE CONHECIMENTO
- √Åreas evitadas ou desconhecidas
- Temas sobre os quais busca informa√ß√µes

Retorne em formato JSON estruturado.
`

    try {
      const response = await this.callGeminiAPI(prompt)
      return this.parseKnowledgeDomain(response)
    } catch (error) {
      console.error('‚ùå Erro na an√°lise de conhecimento:', error)
      return this.getDefaultKnowledgeDomain()
    }
  }

  private async analyzeLinguisticPatterns(transcriptions: string): Promise<LinguisticPatterns> {
    const prompt = `
# An√°lise de Padr√µes Lingu√≠sticos

Analise os padr√µes lingu√≠sticos √∫nicos da pessoa:

${transcriptions}

## EXTRAIA:

### 1. VOCABUL√ÅRIO CARACTER√çSTICO
- Palavras ou frases utilizadas com frequ√™ncia incomum
- Campos sem√¢nticos preferidos para met√°foras
- Termos t√©cnicos recorrentes

### 2. ESTRUTURA DE TEXTO
- Comprimento t√≠pico de frases
- Uso de listas, perguntas ret√≥ricas
- Padr√µes de argumenta√ß√£o

### 3. MARCADORES ESTIL√çSTICOS
- Uso de humor, ironia, sarcasmo
- Adapta√ß√µes de estilo para diferentes contextos
- Informalidade vs. formalidade

Identifique padr√µes √∫nicos que caracterizam esta pessoa especificamente.
Retorne em formato JSON.
`

    try {
      const response = await this.callGeminiAPI(prompt)
      return this.parseLinguisticPatterns(response)
    } catch (error) {
      console.error('‚ùå Erro na an√°lise lingu√≠stica:', error)
      return this.getDefaultLinguisticPatterns()
    }
  }

  private async prepareVoiceCloningData(responses: any[], audioFiles: string[]): Promise<VoiceCloningData> {
    console.log('üé§ Preparando dados para clonagem de voz...')
    
    // Selecionar os melhores arquivos de √°udio baseado em dura√ß√£o e qualidade
    const bestAudios = responses
      .filter(r => r.audio_file_url && r.audio_duration > 10) // M√≠nimo 10 segundos
      .sort((a, b) => b.audio_duration - a.audio_duration) // Ordenar por dura√ß√£o
      .slice(0, 20) // Top 20 √°udios
      .map(r => r.audio_file_url)

    // Analisar caracter√≠sticas vocais baseado nas transcri√ß√µes
    const transcriptions = responses.map(r => r.transcript_text).join(' ')
    
    const voiceCloningPrompt = `
# An√°lise para Clonagem de Voz - AllTalk TTS

Analise as transcri√ß√µes para identificar caracter√≠sticas vocais e trejeitos de fala:

${transcriptions}

## IDENTIFIQUE:

### 1. CARACTER√çSTICAS VOCAIS (inferidas do texto)
- Ritmo de fala (r√°pido, lento, vari√°vel)
- Padr√µes de entona√ß√£o
- √änfases caracter√≠sticas

### 2. MARCADORES EMOCIONAIS
- Palavras/frases que indicam excita√ß√£o
- Padr√µes de contempla√ß√£o
- Formas de dar √™nfase
- Indicadores de hesita√ß√£o

### 3. PADR√ïES DE FALA
- Preenchimentos vocais (n√©, ent√£o, tipo)
- Padr√µes de pausa
- Repeti√ß√µes caracter√≠sticas
- Frases distintivas

### 4. TREJEITOS LINGU√çSTICOS
- Pron√∫ncias caracter√≠sticas
- Sotaque regional
- Vocabul√°rio espec√≠fico
- Padr√µes gramaticais √∫nicos

Foque em elementos que tornam a fala desta pessoa √∫nica e reconhec√≠vel.
Retorne em formato JSON detalhado.
`

    try {
      const response = await this.callGeminiAPI(voiceCloningPrompt)
      const parsedData = this.parseVoiceCloningData(response)
      
      return {
        ...parsedData,
        bestAudioFiles: bestAudios
      }
    } catch (error) {
      console.error('‚ùå Erro na prepara√ß√£o de dados de voz:', error)
      return this.getDefaultVoiceCloningData(bestAudios)
    }
  }

  private async createBehaviorModel(transcriptions: string, personality: PersonalityProfile, beliefs: BeliefSystem): Promise<any> {
    const prompt = `
# Cria√ß√£o de Modelo de Comportamento

Com base na an√°lise de personalidade e sistema de cren√ßas, crie um modelo comportamental:

## DADOS DE ENTRADA:
### Personalidade: ${JSON.stringify(personality, null, 2)}
### Cren√ßas: ${JSON.stringify(beliefs, null, 2)}
### Transcri√ß√µes: ${transcriptions.substring(0, 5000)}...

## CRIE:

### 1. PERFIL CONDENSADO (2-3 par√°grafos)
Resumo da ess√™ncia da personalidade

### 2. DIRETRIZES DE RESPOSTA
- T√≥picos de maior engajamento
- T√≥picos a evitar ou abordar com cautela
- Estilos de comunica√ß√£o preferidos
- Valores a priorizar em decis√µes

### 3. EXEMPLOS DE DI√ÅLOGO (5-7 exemplos)
Como a pessoa responderia a diferentes situa√ß√µes

Retorne em formato JSON estruturado.
`

    try {
      const response = await this.callGeminiAPI(prompt)
      return this.parseBehaviorModel(response)
    } catch (error) {
      console.error('‚ùå Erro na cria√ß√£o do modelo comportamental:', error)
      return this.getDefaultBehaviorModel()
    }
  }

  private async generateFineTuningDataset(userEmail: string, responses: any[], personality: PersonalityProfile, behaviorModel: any): Promise<any[]> {
    console.log('ü§ñ Gerando dataset de fine-tuning para TinyLlama...')
    
    const dataset = []
    
    // Adicionar exemplos baseados nas respostas reais
    for (const response of responses) {
      dataset.push({
        instruction: `Responda como ${userEmail.split('@')[0]} responderia √† seguinte pergunta, mantendo seu estilo de comunica√ß√£o caracter√≠stico:`,
        input: response.question_text,
        output: response.transcript_text,
        metadata: {
          question_domain: response.question_domain,
          question_index: response.question_index,
          emotional_tone: response.emotional_tone,
          personality_traits: personality.communicationStyle
        }
      })
    }

    // Adicionar exemplos sint√©ticos baseados no modelo comportamental
    const syntheticExamples = await this.generateSyntheticExamples(behaviorModel, personality)
    dataset.push(...syntheticExamples)

    console.log(`‚úÖ Dataset gerado com ${dataset.length} exemplos`)
    return dataset
  }

  private async generateSyntheticExamples(behaviorModel: any, personality: PersonalityProfile): Promise<any[]> {
    const prompt = `
# Gera√ß√£o de Exemplos Sint√©ticos para Fine-tuning

Baseado no modelo comportamental, gere 20 exemplos sint√©ticos de perguntas e respostas:

## MODELO: ${JSON.stringify(behaviorModel, null, 2)}
## PERSONALIDADE: ${JSON.stringify(personality, null, 2)}

Gere exemplos que demonstrem:
- Estilo de comunica√ß√£o caracter√≠stico
- Padr√µes de pensamento
- Valores e cren√ßas
- Trejeitos lingu√≠sticos

Formato: {"instruction": "...", "input": "...", "output": "..."}
Retorne array JSON com 20 exemplos.
`

    try {
      const response = await this.callGeminiAPI(prompt)
      return this.parseSyntheticExamples(response)
    } catch (error) {
      console.error('‚ùå Erro na gera√ß√£o de exemplos sint√©ticos:', error)
      return []
    }
  }

  private async callGeminiAPI(prompt: string): Promise<string> {
    if (!this.geminiApiKey) {
      throw new Error('Gemini API key n√£o configurada')
    }

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${this.geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      })
    })

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status}`)
    }

    const result = await response.json()
    return result.candidates?.[0]?.content?.parts?.[0]?.text || 'An√°lise n√£o dispon√≠vel'
  }

  // M√©todos de parsing (implementa√ß√£o simplificada para demonstra√ß√£o)
  private parsePersonalityProfile(response: string): PersonalityProfile {
    try {
      // Tentar extrair JSON da resposta
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
    } catch (error) {
      console.warn('Erro ao parsear perfil de personalidade, usando padr√£o')
    }
    
    return this.getDefaultPersonalityProfile()
  }

  private parseBeliefSystem(response: string): BeliefSystem {
    try {
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
    } catch (error) {
      console.warn('Erro ao parsear sistema de cren√ßas, usando padr√£o')
    }
    
    return this.getDefaultBeliefSystem()
  }

  private parseKnowledgeDomain(response: string): KnowledgeDomain {
    try {
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
    } catch (error) {
      console.warn('Erro ao parsear dom√≠nio de conhecimento, usando padr√£o')
    }
    
    return this.getDefaultKnowledgeDomain()
  }

  private parseLinguisticPatterns(response: string): LinguisticPatterns {
    try {
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
    } catch (error) {
      console.warn('Erro ao parsear padr√µes lingu√≠sticos, usando padr√£o')
    }
    
    return this.getDefaultLinguisticPatterns()
  }

  private parseVoiceCloningData(response: string): Partial<VoiceCloningData> {
    try {
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
    } catch (error) {
      console.warn('Erro ao parsear dados de voz, usando padr√£o')
    }
    
    return {}
  }

  private parseBehaviorModel(response: string): any {
    try {
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
    } catch (error) {
      console.warn('Erro ao parsear modelo comportamental, usando padr√£o')
    }
    
    return this.getDefaultBehaviorModel()
  }

  private parseSyntheticExamples(response: string): any[] {
    try {
      const jsonMatch = response.match(/\[[\s\S]*\]/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
    } catch (error) {
      console.warn('Erro ao parsear exemplos sint√©ticos, usando padr√£o')
    }
    
    return []
  }

  // M√©todos de fallback com dados padr√£o
  private getDefaultPersonalityProfile(): PersonalityProfile {
    return {
      communicationStyle: {
        formality: 'mixed',
        directness: 'balanced',
        technicalLevel: 'accessible',
        humorUsage: {
          frequency: 'medium',
          type: ['situacional'],
          contexts: ['conversas casuais']
        },
        characteristicExpressions: ['na verdade', 'eu acho que'],
        syntacticPatterns: ['frases m√©dias', 'estrutura clara']
      },
      thinkingPatterns: {
        structure: 'linear',
        approach: 'balanced',
        abstraction: 'balanced',
        detail: 'balanced',
        processingSpeed: 'deliberate'
      },
      emotionalResponse: {
        strongTriggers: ['injusti√ßa', 'crescimento pessoal'],
        stressPatterns: ['reflex√£o profunda'],
        regulationStrategies: ['autoconhecimento'],
        enthusiasmTriggers: ['aprendizado', 'conex√µes humanas']
      },
      socialPosture: {
        orientation: 'ambivert',
        leadershipStyle: ['colaborativo'],
        conflictStyle: ['diplom√°tico'],
        interactionPreferences: ['conversas profundas']
      }
    }
  }

  private getDefaultBeliefSystem(): BeliefSystem {
    return {
      fundamentalValues: ['autenticidade', 'crescimento', 'conex√£o'],
      ethicalPrinciples: ['honestidade', 'empatia', 'responsabilidade'],
      worldViews: {
        humanNature: 'Pessoas s√£o fundamentalmente boas e capazes de crescimento',
        organizations: 'Sistemas podem ser melhorados atrav√©s de colabora√ß√£o',
        changeAndProgress: 'Mudan√ßa √© poss√≠vel atrav√©s de esfor√ßo consciente'
      },
      personalPhilosophy: {
        decisionMaking: 'Baseado em valores e impacto nas pessoas',
        riskAttitude: 'Calculado, mas aberto a novas experi√™ncias',
        successDefinition: 'Crescimento pessoal e contribui√ß√£o positiva'
      },
      thoughtEvolution: {
        detectedChanges: ['maior autoconhecimento ao longo das respostas'],
        pivotalEvents: ['reflex√µes sobre experi√™ncias passadas']
      }
    }
  }

  private getDefaultKnowledgeDomain(): KnowledgeDomain {
    return {
      expertiseAreas: ['desenvolvimento pessoal', 'relacionamentos'],
      intellectualInterests: ['psicologia', 'comunica√ß√£o', 'crescimento'],
      knowledgeGaps: ['√°reas t√©cnicas espec√≠ficas'],
      authorityTopics: ['experi√™ncias pessoais', 'autoconhecimento'],
      informationSources: ['experi√™ncia pr√≥pria', 'reflex√£o']
    }
  }

  private getDefaultLinguisticPatterns(): LinguisticPatterns {
    return {
      characteristicVocabulary: ['realmente', 'acredito', 'sinto'],
      semanticFields: ['emo√ß√µes', 'relacionamentos', 'crescimento'],
      technicalTerms: ['autoconhecimento', 'desenvolvimento'],
      textStructure: {
        sentenceLength: 'medium',
        paragraphStyle: 'narrativo',
        argumentationPatterns: ['experi√™ncia pessoal', 'reflex√£o']
      },
      stylisticMarkers: {
        humor: ['situacional', 'leve'],
        formality: ['casual-profissional'],
        audienceAdaptation: ['emp√°tico', 'inclusivo']
      }
    }
  }

  private getDefaultVoiceCloningData(audioFiles: string[]): VoiceCloningData {
    return {
      bestAudioFiles: audioFiles,
      vocalCharacteristics: {
        pitch: 'm√©dio',
        pace: 'moderado',
        rhythm: 'natural',
        intonation: ['expressiva', 'variada']
      },
      emotionalMarkers: {
        excitement: ['tom mais alto', 'ritmo acelerado'],
        contemplation: ['pausas reflexivas', 'tom mais baixo'],
        emphasis: ['repeti√ß√£o', 'intensidade'],
        hesitation: ['pausas', 'preenchimentos']
      },
      speechPatterns: {
        fillers: ['n√©', 'ent√£o', 'assim'],
        pauses: ['reflexivas', 'naturais'],
        repetitions: ['para √™nfase'],
        characteristicPhrases: ['eu acho que', 'na verdade']
      },
      linguisticTreats: {
        pronunciation: ['clara', 'articulada'],
        accent: 'brasileiro neutro',
        vocabulary: ['acess√≠vel', 'expressivo'],
        grammar: ['correta', 'natural']
      }
    }
  }

  private getDefaultBehaviorModel(): any {
    return {
      condensedProfile: 'Pessoa reflexiva e emp√°tica, com forte orienta√ß√£o para crescimento pessoal e conex√µes aut√™nticas. Comunica-se de forma clara e acess√≠vel, demonstrando autoconhecimento e interesse genu√≠no pelos outros.',
      responseGuidelines: {
        engagementTopics: ['desenvolvimento pessoal', 'relacionamentos', 'autoconhecimento'],
        cautionTopics: ['temas muito t√©cnicos', 'assuntos pol√™micos'],
        communicationStyle: ['emp√°tico', 'reflexivo', 'aut√™ntico'],
        decisionValues: ['impacto humano', 'crescimento', 'autenticidade']
      },
      dialogueExamples: [
        {
          situation: 'Pergunta sobre desafios pessoais',
          response: 'Eu acredito que os desafios s√£o oportunidades de crescimento. Na minha experi√™ncia...'
        }
      ]
    }
  }
}

// Inst√¢ncia singleton
export const advancedAnalysisService = new AdvancedAnalysisService()

