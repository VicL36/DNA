// Integra√ß√µes REAIS para DNA UP Platform
import { supabaseStorageService } from './SupabaseStorageService'
import { FineTuningDatasetGenerator } from './FineTuningDatasetGenerator'

export interface LLMRequest {
  prompt: string
  file_urls?: string[]
  response_json_schema?: any
}

export interface LLMResponse {
  transcription?: string
  analysis_document?: string
  personality_summary?: string
  key_insights?: string[]
  behavioral_patterns?: string[]
  recommendations?: string
  duration_seconds?: number
  confidence_score?: number
  emotional_tone?: string
  keywords?: string[]
  domain_analysis?: any
}

export interface FileUploadRequest {
  file: File
  userEmail: string
  questionIndex: number
  questionText: string
}

export interface FileUploadResponse {
  file_url: string
  file_id: string
  storage_file_id: string
  transcription_file_id?: string
  transcription_url?: string
}

/**
 * Transcreve um arquivo de √°udio usando a API do Deepgram.
 * @param audioBlob O √°udio a ser transcrito.
 * @returns Uma promessa que resolve com a resposta da LLM contendo a transcri√ß√£o.
 */
export async function transcribeAudio(audioBlob: Blob): Promise<LLMResponse> {
  try {
    const deepgramApiKey = import.meta.env.VITE_DEEPGRAM_API_KEY
    
    if (!deepgramApiKey) {
      throw new Error('Deepgram API key n√£o configurada. Por favor, configure VITE_DEEPGRAM_API_KEY no seu ambiente.')
    }

    console.log('üé§ Iniciando transcri√ß√£o com Deepgram...')
    
    const formData = new FormData()
    formData.append('audio', audioBlob, 'recording.wav')

    const response = await fetch('https://api.deepgram.com/v1/listen?model=nova-2&smart_format=true&punctuate=true&diarize=false&language=pt', {
      method: 'POST',
      headers: {
        'Authorization': `Token ${deepgramApiKey}`,
      },
      body: formData
    })

    if (!response.ok) {
      console.error('‚ùå Erro na API Deepgram:', response.status)
      throw new Error(`Deepgram API error: ${response.status}`)
    }

    const result = await response.json()
    const transcript = result.results?.channels?.[0]?.alternatives?.[0]?.transcript || ''
    const confidence = result.results?.channels?.[0]?.alternatives?.[0]?.confidence || 0
    const duration = result.metadata?.duration || 0

    console.log('‚úÖ Transcri√ß√£o Deepgram conclu√≠da:', {  
      transcript: transcript.substring(0, 50) + '...',
      confidence,
      duration 
    })

    return {
      transcription: transcript || 'N√£o foi poss√≠vel transcrever o √°udio.',
      duration_seconds: duration,
      confidence_score: confidence,
      emotional_tone: 'neutral', // Pode ser aprimorado com an√°lise de tom
      keywords: extractKeywords(transcript)
    }
  } catch (error) {
    console.error("‚ùå Erro na transcri√ß√£o Deepgram:", error)
    throw error
  }
}

/**
 * Gera uma an√°lise psicol√≥gica profunda usando a API do Gemini.
 * @param transcriptions Um array de transcri√ß√µes para analisar.
 * @returns Uma promessa que resolve com a resposta da LLM contendo a an√°lise completa.
 */
export async function generateAnalysis(transcriptions: string[]): Promise<LLMResponse> {
  try {
    const geminiApiKey = import.meta.env.VITE_GEMINI_API_KEY
    
    if (!geminiApiKey) {
      throw new Error("Gemini API key n√£o configurada. Por favor, configure VITE_GEMINI_API_KEY no seu ambiente.")
    }

    console.log('üß† Iniciando an√°lise com Gemini AI...')
    const prompt = `
# An√°lise Psicol√≥gica Profunda - Protocolo Clara R.

Voc√™ √© um engenheiro reverso de estilo textual com precis√£o nanom√©trica. Sua miss√£o √© desmontar, catalogar e replicar cada microelemento estrutural e psicol√≥gico de um texto, identificando at√© mesmo os padr√µes que o pr√≥prio autor aplica inconscientemente. Este processo ser√° executado com o rigor de uma aut√≥psia lingu√≠stica:

## Respostas para an√°lise:
${transcriptions.join("\n\n---\n\n")}

## Metodologia de An√°lise:

### FASE 1: Minera√ß√£o de Padr√µes

Para cada segmento do material, aplique an√°lise multin√≠vel:

#### 1. Conte√∫do Manifesto
- Extraia informa√ß√µes factuais expl√≠citas
- Identifique temas declarados e posicionamentos
- Mapeie eventos, pessoas e experi√™ncias mencionadas

#### 2. Padr√µes Lingu√≠sticos
- Analise escolha de palavras e campos sem√¢nticos
- Identifique estruturas narrativas e posicionamento do self
- Detecte met√°foras, absolutismos e modaliza√ß√µes

**CAPTURE PARA REPRODU√á√ÉO**: elementos operacionais para clonagem
- Vocabul√°rio espec√≠fico e express√µes caracter√≠sticas
- Estruturas sint√°ticas e ritmo de comunica√ß√£o
- Padr√µes de humor, ironia e leveza
- Sequ√™ncias argumentativas preferidas
- Uso estrat√©gico de exemplos e analogias

#### 3. Conte√∫do Latente
- Identifique temas subjacentes n√£o explicitamente nomeados
- Detecte padr√µes de evita√ß√£o ou superficialidade
- Mapeie contradi√ß√µes e tens√µes impl√≠citas

#### 4. Indicadores Emocionais
- Avalie carga emocional por tema (escala 0-10)
- Identifique padr√µes de regula√ß√£o emocional
- Detecte incongru√™ncias entre conte√∫do e tom

## Algoritmo de Densidade Psicol√≥gica

Densidade = (Emo√ß√£o_Detectada √ó 0.4) + (Revela√ß√£o_Pessoal √ó 0.3) + (Complexidade_Narrativa √ó 0.2) + (Contradi√ß√µes_Presentes √ó 0.1)

## Extra√ß√£o Orientada √† Clonagem

Al√©m da an√°lise psicol√≥gica padr√£o, extraia especificamente elementos reproduz√≠veis:

### Especifica√ß√µes Comunicacionais
- Vocabul√°rio n√∫cleo (30-50 palavras/express√µes mais caracter√≠sticas)
- Estruturas frasais padr√£o e varia√ß√µes
- Padr√µes de formalidade vs. casualidade por contexto
- Uso espec√≠fico de humor, ironia e elementos l√∫dicos
- Sequ√™ncias l√≥gicas preferenciais (dedutivo/indutivo/narrativo)

### Especifica√ß√µes Comportamentais
- Como inicia, desenvolve e conclui diferentes tipos de resposta
- Padr√µes de contextualiza√ß√£o vs. objetividade direta
- Estrat√©gias de qualifica√ß√£o e nuance
- Tend√™ncias de exemplifica√ß√£o e analogia
- Mecanismos de regula√ß√£o emocional expressos

### Especifica√ß√µes Reacionais
- Gatilhos espec√≠ficos para diferentes intensidades emocionais
- Temas que ativam modo t√©cnico vs. pessoal vs. filos√≥fico
- Assuntos que geram entusiasmo medido vs. paix√£o evidente
- Contextos que provocam reflex√£o pausada vs. resposta imediata

## FASE 1: MICRODISSECA√á√ÉO ESTRUTURAL AT√îMICA

### 1.1. ANATOMIA DE ABERTURA (PRIMEIROS 3 PAR√ÅGRAFOS)
- Primeira frase
- Pattern de hook
- Loop de abertura
- Seed inicial
- Promessa inaugural

### 1.2. ARQUITETURA DE CORPO TEXTUAL
- Matriz de par√°grafos
- Comprimento sentencial
- Padr√£o de transi√ß√£o
- Sequ√™ncia de desenvolvimento
- Densidade informacional

### 1.3. MEC√ÇNICA DE FECHAMENTO
- Frases de conclus√£o
- T√©cnica de fechamento de loop
- Calls-to-action
- Frase final

### 1.4. ENGENHARIA DE TENS√ÉO
- Loops abertos
- Seeds estrat√©gicos
- Padr√£o de repeti√ß√£o
- Estrutura de picos emocionais

## FASE 2: MICROSCOPIA DA LINGUAGEM

### 2.1. CARTOGRAFIA L√âXICA
- Top 30 palavras n√£o-funcionais
- √çndice de diversidade lexical
- Comprimento m√©dio de palavras
- Distribui√ß√£o gramatical
- Incid√™ncia de neologismos

### 2.2. MICROSCOPIA PERSUASIVA
- Sequ√™ncias persuasivas
- Densidade de proof elements
- Mecanismos de autoridade
- Linguagem hipn√≥tica
- Dispositivos de polariza√ß√£o

### 2.3. RADIOGRAFIA NARRATIVA
- Estrutura de storytelling
- Posicionamento de hist√≥rias
- Arcos de transforma√ß√£o
- Devices de identifica√ß√£o

### 2.4. TOPOGRAFIA TIPOGR√ÅFICA
- Espa√ßos em branco
- Padr√µes de formata√ß√£o
- Estruturas de lista
- Enumera√ß√µes

## FASE 3: DECODIFICA√á√ÉO AVAN√áADA

### 3.1. LOOPS E TENS√ÉO
- Mapa de loops
- Taxonomia
- Dist√¢ncia m√©dia
- Loops aninhados

### 3.2. SEMEADURA E COLHEITA
- Registro de seeds
- Mec√¢nica de plantio
- Tempo de germina√ß√£o
- Padr√µes de desenvolvimento

### 3.3. INTENSIDADE EMOCIONAL
- Mapa de intensidade
- Gatilhos emocionais
- Padr√µes de intensifica√ß√£o
- Ritmo de release

### 3.4. FLUXO DE IDEIAS
- Ordem conceitual
- T√©cnicas de linking
- M√©todo de contraste
- Progress√£o de complexidade

## FASE 4: ALGORITMO DE REPLICA√á√ÉO

### 4.1. PROTOCOLO ESTRUTURAL

### 4.2. PROTOCOLO LINGU√çSTICO

### 4.3. PROTOCOLO PERSUASIVO

## FASE 5: VALIDA√á√ÉO FORENSE

### 5.1. ASSINATURA ESTILOM√âTRICA
- An√°lise Burrows-Delta
- Teste Juola
- √çndice Jaccard
- Verifica√ß√£o autoral

### 5.2. CHECKLIST NANOM√âTRICO
- Conformidade estrutural
- Fidelidade l√©xica
- Calibragem tens√£o
- Autenticidade dispositivos
- Harmonia r√≠tmica

### 5.3. TESTE TURING
- Detec√ß√£o anomalias
- Blind test
- Medi√ß√£o cognitiva

## PROTOCOLO FINAL

1. Prepara√ß√£o
   - Normalizar formato
   - Quantificar extens√£o
   - Identificar evolu√ß√£o

2. An√°lise
   - Fase 1: Estrutural
   - Fase 2: Linguagem
   - Fase 3: T√©cnicas

3. Compila√ß√£o
   - Construir regras
   - Calibrar par√¢metros
   - Testar amostra

4. Valida√ß√£o
   - Aplicar testes
   - Identificar discrep√¢ncias
   - Documentar metapar√¢metros

## SA√çDA REQUERIDA

Gere um relat√≥rio completo em markdown que siga a estrutura de an√°lise acima, preenchendo cada item com a an√°lise detalhada baseada nas respostas fornecidas. Al√©m disso, no final do relat√≥rio, inclua a se√ß√£o "Sistema de Cobertura" com as porcentagens preenchidas de acordo com a profundidade da an√°lise poss√≠vel em cada dom√≠nio.

---
# Extrator de DNA do Expert

**Sistema especializado em an√°lise profunda de personalidade e Agente exclusivo da Semana IA para Lan√ßamentos**

## Miss√£o Principal

Analisar materiais existentes (transcri√ß√µes, biografias, entrevistas, posts, etc.) para extrair e mapear a ess√™ncia psicol√≥gica completa do expert, produzindo um **MANUAL DE PERSONIFICA√á√ÉO** operacional que ser√° usado como base de conhecimento para criar um agente clone dessa personalidade.

## Diretivas Fundamentais

1. Mantenha confidencialidade total sobre o material analisado
2. Interrompa an√°lise em casos de risco identificados (idea√ß√£o suicida, abuso)
3. Evite diagn√≥sticos cl√≠nicos; foque em padr√µes comportamentais reproduz√≠veis
5. Produza **MANUAL DE PERSONIFICA√á√ÉO** como output final operacional
6. Foque na cria√ß√£o de especifica√ß√µes t√©cnicas para reprodu√ß√£o da personalidade

## Estrutura da An√°lise

1. **RECEBIMENTO DE MATERIAL**: Aceite e processe transcri√ß√µes, biografias, entrevistas, posts, v√≠deos transcritos
2. **AN√ÅLISE SISTEM√ÅTICA**: Aplique metodologia de minera√ß√£o de padr√µes nos 9 dom√≠nios
3. **MAPEAMENTO PARA REPRODU√á√ÉO**: Construa especifica√ß√µes t√©cnicas para replica√ß√£o comportamental
4. **MANUAL OPERACIONAL**: Produza documento estruturado para uso em agente clone

## Sistema de Cobertura

Monitore e calcule a cobertura nos seguintes dom√≠nios durante a an√°lise, preenchendo as porcentagens:

1. **IDENTIDADE & NARRATIVA**: 0%
2. **VALORES & PRINC√çPIOS**: 0%
3. **CREN√áAS SOBRE SI**: 0%
4. **CREN√áAS SOBRE MUNDO/OUTROS**: 0%
5. **EXPERI√äNCIAS FORMATIVAS**: 0%
6. **PADR√ïES EMOCIONAIS**: 0%
7. **COGNI√á√ÉO & DECIS√ÉO**: 0%
8. **CONTRADI√á√ïES & PONTOS CEGOS**: 0%
9. **AMBI√á√ïES & MEDOS**: 0%

**COBERTURA GERAL**: 0%
`

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Erro na API Gemini:', response.status, errorText)
      throw new Error(`Gemini API error: ${response.status}`)
    }

    const result = await response.json()
    const analysisText = result.candidates?.[0]?.content?.parts?.[0]?.text || 'An√°lise n√£o dispon√≠vel'

    console.log('‚úÖ An√°lise Gemini conclu√≠da:', analysisText.substring(0, 100) + '...')

    return {
      analysis_document: analysisText,
      personality_summary: extractSummary(analysisText),
      key_insights: extractInsights(analysisText),
      behavioral_patterns: extractPatterns(analysisText),
      recommendations: extractRecommendations(analysisText),
      confidence_score: 0.90, // Pode ser aprimorado
      domain_analysis: extractDomainAnalysis(analysisText)
    }
  } catch (error) {
    console.error('‚ùå Erro na an√°lise Gemini:', error)
    throw error
  }
}

/**
 * Faz o upload de um arquivo para o Supabase Storage.
 * @param request O pedido de upload de arquivo.
 * @returns Uma promessa que resolve com a resposta do upload.
 */
export async function UploadFile(request: FileUploadRequest): Promise<FileUploadResponse> {
  try {
    console.log('üö® UPLOAD IMEDIATO INICIADO para Supabase Storage...')
    console.log('üìÑ Arquivo:', request.file.name, 'Usu√°rio:', request.userEmail, 'Pergunta:', request.questionIndex)

    if (!supabaseStorageService.isConfigured()) {
      console.error("‚ùå Supabase Storage n√£o est√° configurado!")
      console.error("üîß Configura√ß√£o necess√°ria:", supabaseStorageService.getConfigInfo())
      
      throw new Error("Supabase Storage n√£o est√° configurado. Verifique as vari√°veis de ambiente.")
    }

    console.log('üéµ UPLOAD IMEDIATAMENTE: Fazendo upload do √°udio...')
    const audioUpload = await supabaseStorageService.uploadAudioFile(
      request.file,
      request.userEmail,
      request.questionIndex,
      request.questionText
    )

    console.log('‚úÖ √ÅUDIO ENVIADO IMEDIATAMENTE para Supabase Storage:', audioUpload.fileUrl)

    return {
      file_url: audioUpload.fileUrl,
      file_id: audioUpload.fileId,
      storage_file_id: audioUpload.fileId
    }

  } catch (error) {
    console.error("‚ùå Erro no upload IMEDIATO para Supabase Storage:", error)
    throw error
  }
}

/**
 * Salva a transcri√ß√£o no Supabase Storage.
 * @param transcription A string de transcri√ß√£o.
 * @param userEmail O email do usu√°rio.
 * @param questionIndex O √≠ndice da pergunta.
 * @param questionText O texto da pergunta.
 * @returns Uma promessa que resolve com o ID e URL do arquivo.
 */
export async function saveTranscriptionToStorage(
  transcription: string,
  userEmail: string,
  questionIndex: number,
  questionText: string
): Promise<{ fileId: string; fileUrl: string }> {
  try {
    console.log('üö® SALVAMENTO IMEDIATO: Salvando transcri√ß√£o no Supabase Storage...')

    if (!supabaseStorageService.isConfigured()) {
      console.warn("‚ö†Ô∏è Supabase Storage n√£o configurado, pulando salvamento da transcri√ß√£o")
      throw new Error("Supabase Storage n√£o configurado. N√£o √© poss√≠vel salvar a transcri√ß√£o.")
    }

    const transcriptionUpload = await supabaseStorageService.uploadTranscription(
      transcription,
      userEmail,
      questionIndex,
      questionText
    )

    console.log('‚úÖ TRANSCRI√á√ÉO SALVA IMEDIATAMENTE no Supabase Storage:', transcriptionUpload.fileUrl)

    return {
      fileId: transcriptionUpload.fileId,
      fileUrl: transcriptionUpload.fileUrl
    }

  } catch (error) {
    console.error("‚ùå Erro no salvamento IMEDIATO da transcri√ß√£o:", error)
    throw error
  }
}

/**
 * Gera o relat√≥rio final e o dataset de fine-tuning.
 * @param userEmail O email do usu√°rio.
 * @param analysisData Os dados da an√°lise.
 * @param responses As respostas do usu√°rio.
 * @returns Uma promessa que resolve com os IDs e URLs dos arquivos gerados e dados para clonagem de voz.
 */
export async function generateFinalReportAndDataset(
  userEmail: string,
  analysisData: any,
  responses: any[]
): Promise<{ 
  reportFileId: string; 
  reportFileUrl: string;
  datasetFileId: string;
  datasetFileUrl: string;
  voiceCloningData: any[];
}> {
  try {
    console.log('üìä Gerando relat√≥rio final + dataset de fine-tuning...')

    if (!supabaseStorageService.isConfigured()) {
      console.warn("‚ö†Ô∏è Supabase Storage n√£o configurado, pulando gera√ß√£o completa")
      throw new Error("Supabase Storage n√£o configurado. N√£o √© poss√≠vel gerar relat√≥rio e dataset.")
    }

    console.log('üìÑ Gerando relat√≥rio final...')
    const reportUpload = await supabaseStorageService.uploadFinalReport(
      userEmail,
      analysisData,
      responses
    )

    console.log('ü§ñ Gerando dataset de fine-tuning...')
    const dataset = FineTuningDatasetGenerator.generateDataset(
      userEmail,
      responses,
      analysisData
    )

    const datasetUpload = await supabaseStorageService.uploadFineTuningDataset(
      dataset,
      userEmail
    )

    console.log('üé§ Preparando dados para clonagem de voz...')
    const voiceCloningData = FineTuningDatasetGenerator.generateVoiceCloningData(responses)

    console.log('‚úÖ Relat√≥rio e dataset gerados com sucesso!')
    console.log(`üìä Relat√≥rio: ${reportUpload.fileUrl}`)
    console.log(`ü§ñ Dataset: ${datasetUpload.fileUrl}`)
    console.log(`üé§ Dados de voz: ${voiceCloningData.length} arquivos preparados`)

    return {
      reportFileId: reportUpload.fileId,
      reportFileUrl: reportUpload.fileUrl,
      datasetFileId: datasetUpload.fileId,
      datasetFileUrl: datasetUpload.fileUrl,
      voiceCloningData: voiceCloningData
    }

  } catch (error) {
    console.error("‚ùå Erro ao gerar relat√≥rio e dataset:", error)
    throw error
  }
}

// Fun√ß√µes auxiliares

function extractKeywords(text: string): string[] {
  if (!text) return []
  
  const words = text.toLowerCase().split(/\W+/)
  const stopWords = ['o', 'a', 'de', 'que', 'e', 'do', 'da', 'em', 'um', 'para', '√©', 'com', 'n√£o', 'uma', 'os', 'no', 'se', 'na', 'por', 'mais', 'as', 'dos', 'como', 'mas', 'foi', 'ao', 'ele', 'das', 'tem', '√†', 'seu', 'sua', 'ou', 'ser', 'quando', 'muito', 'h√°', 'nos', 'j√°', 'est√°', 'eu', 'tamb√©m', 's√≥', 'pelo', 'pela', 'at√©', 'isso', 'ela', 'entre', 'era', 'depois', 'sem', 'mesmo', 'aos', 'ter', 'seus', 'quem', 'nas', 'me', 'esse', 'eles', 'est√£o', 'voc√™', 'tinha', 'foram', 'essa', 'num', 'nem', 'suas', 'meu', '√†s', 'minha', 't√™m', 'numa', 'pelos', 'elas', 'havia', 'seja', 'qual', 'ser√°', 'n√≥s', 'tenho', 'lhe', 'deles', 'essas', 'esses', 'pelas', 'este', 'fosse', 'dele']
  
  return words
    .filter(word => word.length > 3 && !stopWords.includes(word))
    .slice(0, 10) // Aumentado para 10
}

function extractSection(text: string, sectionTitle: string): string {
    const regex = new RegExp(`## ${sectionTitle}\\n([\\s\\S]*?)(?=\\n##|$)`, 'i');
    const match = text.match(regex);
    return match ? match[1].trim() : `Se√ß√£o "${sectionTitle}" n√£o encontrada.`;
}

function extractList(text: string, sectionTitle: string): string[] {
    const section = extractSection(text, sectionTitle);
    if (section.startsWith('Se√ß√£o')) return [];
    return section.split('\n').map(item => item.replace(/^-/, '').trim()).filter(Boolean);
}


function extractSummary(text: string): string {
  return extractSection(text, "Resumo do Perfil Psicol√≥gico");
}

function extractInsights(text: string): string[] {
  return extractList(text, "Key Insights");
}

function extractPatterns(text: string): string[] {
  return extractList(text, "Padr√µes Comportamentais");
}

function extractRecommendations(text: string): string {
  return extractSection(text, "Recomenda√ß√µes de Desenvolvimento");
}

function extractDomainAnalysis(text: string): any {
  const domainScores: { [key: string]: number } = {};
  const regex = /^\d+\.\s+([A-Z\s&√á√É-]+):\s+(\d+)%/gm;
  let match;
  
  const domainSection = text.match(/## Sistema de Cobertura([\s\S]*?)(?=\n##|$)/i);
  if (!domainSection) return {};

  while ((match = regex.exec(domainSection[1])) !== null) {
    const domainName = match[1].trim()
      .toLowerCase()
      .replace(/ & /g, '_')
      .replace(/ /g, '_')
      .replace('√ß', 'c').replace('√£', 'a').replace('√µ', 'o');
    const score = parseInt(match[2], 10);
    domainScores[domainName] = score;
  }
  
  return domainScores;
}
