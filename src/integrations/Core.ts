// Integra√ß√µes REAIS para DNA UP Platform - UPLOAD IMEDIATO
import { supabaseStorageService } from './SupabaseStorageService'
import { FineTuningDatasetGenerator } from './FineTuningDatasetGenerator'
// Fix: Import path corrected
import { AdvancedAnalysisService } from './AdvancedAnalysisService'

export interface LLMRequest {
  prompt: string
  file_urls?: string[]
  response_json_schema?: any
}

export interface LLMResponse {
  transcription?: string
  analysis_document?: string
  personality_summary?: string
  key_insights?: string[]
  behavioral_patterns?: string[]
  recommendations?: string
  duration_seconds?: number
  confidence_score?: number
  emotional_tone?: string
  keywords?: string[]
  domain_analysis?: any
}

export interface FileUploadRequest {
  file: File
  userEmail: string
  questionIndex: number
  questionText: string
}

export interface FileUploadResponse {
  file_url: string
  file_id: string
  storage_file_id: string
  transcription_file_id?: string
  transcription_url?: string
}

// Fix: Create instance of AdvancedAnalysisService
const advancedAnalysisService = new AdvancedAnalysisService()

// Transcri√ß√£o real usando Deepgram
export async function transcribeAudio(audioBlob: Blob): Promise<LLMResponse> {
  try {
    const deepgramApiKey = import.meta.env.VITE_DEEPGRAM_API_KEY
    
    if (!deepgramApiKey) {
      console.warn('‚ö†Ô∏è Deepgram API key n√£o configurada, usando transcri√ß√£o simulada')
      return {
        transcription: 'Transcri√ß√£o simulada: Esta √© uma resposta de exemplo para teste da funcionalidade de transcri√ß√£o autom√°tica.',
        duration_seconds: 30,
        confidence_score: 0.95,
        emotional_tone: 'neutral',
        keywords: ['exemplo', 'teste', 'resposta', 'funcionalidade']
      }
    }

    console.log('üé§ Iniciando transcri√ß√£o com Deepgram...')
    
    const formData = new FormData()
    formData.append('audio', audioBlob, 'recording.wav')

    const response = await fetch('https://api.deepgram.com/v1/listen?model=nova-2&smart_format=true&punctuate=true&diarize=false&language=pt', {
      method: 'POST',
      headers: {
        'Authorization': `Token ${deepgramApiKey}`,
      },
      body: formData
    })

    if (!response.ok) {
      console.error('‚ùå Erro na API Deepgram:', response.status)
      throw new Error(`Deepgram API error: ${response.status}`)
    }

    const result = await response.json()
    const transcript = result.results?.channels?.[0]?.alternatives?.[0]?.transcript || ''
    const confidence = result.results?.channels?.[0]?.alternatives?.[0]?.confidence || 0
    const duration = result.metadata?.duration || 0

    console.log('‚úÖ Transcri√ß√£o Deepgram conclu√≠da:', { 
      transcript: transcript.substring(0, 50) + '...', 
      confidence,
      duration 
    })

    return {
      transcription: transcript || 'N√£o foi poss√≠vel transcrever o √°udio.',
      duration_seconds: duration,
      confidence_score: confidence,
      emotional_tone: 'neutral',
      keywords: extractKeywords(transcript)
    }
  } catch (error) {
    console.error('‚ùå Erro na transcri√ß√£o Deepgram:', error)
    
    // Fallback para transcri√ß√£o simulada
    return {
      transcription: 'Transcri√ß√£o simulada: Esta √© uma resposta de exemplo para teste da funcionalidade de transcri√ß√£o autom√°tica.',
      duration_seconds: 25,
      confidence_score: 0.85,
      emotional_tone: 'neutral',
      keywords: ['exemplo', 'teste', 'funcionalidade']
    }
  }
}

// An√°lise usando GEMINI
export async function generateAnalysis(transcriptions: string[]): Promise<LLMResponse> {
  try {
    const geminiApiKey = import.meta.env.VITE_GEMINI_API_KEY
    
    if (!geminiApiKey) {
      console.warn('‚ö†Ô∏è Gemini API key n√£o configurada, usando an√°lise simulada')
      return generateMockAnalysis(transcriptions)
    }

    console.log('üß† Iniciando an√°lise com Gemini AI...')

    const prompt = `
# An√°lise Psicol√≥gica Profunda - Protocolo Clara R.

Voc√™ √© um especialista em an√°lise psicol√≥gica. Analise as seguintes respostas do protocolo Clara R. e gere uma an√°lise completa da personalidade.

## Respostas para an√°lise:
${transcriptions.join('\n\n---\n\n')}

## Instru√ß√µes:
1. Analise padr√µes de personalidade, valores, cren√ßas e comportamentos
2. Identifique caracter√≠sticas √∫nicas e tra√ßos dominantes
3. Gere insights profundos sobre motiva√ß√µes e medos
4. Forne√ßa recomenda√ß√µes de desenvolvimento pessoal
5. Mantenha tom profissional e emp√°tico
6. Responda em portugu√™s brasileiro

## Estrutura da resposta:
- Perfil Geral (2-3 par√°grafos)
- Caracter√≠sticas Principais (lista de 5-6 pontos)
- Padr√µes Comportamentais (lista de 5-6 pontos)
- Recomenda√ß√µes (2-3 par√°grafos)

Retorne uma an√°lise estruturada e detalhada.
`

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Erro na API Gemini:', response.status, errorText)
      throw new Error(`Gemini API error: ${response.status}`)
    }

    const result = await response.json()
    const analysisText = result.candidates?.[0]?.content?.parts?.[0]?.text || 'An√°lise n√£o dispon√≠vel'

    console.log('‚úÖ An√°lise Gemini conclu√≠da:', analysisText.substring(0, 100) + '...')

    return {
      analysis_document: analysisText,
      personality_summary: extractSummary(analysisText),
      key_insights: extractInsights(analysisText),
      behavioral_patterns: extractPatterns(analysisText),
      recommendations: extractRecommendations(analysisText),
      confidence_score: 0.90,
      domain_analysis: generateDomainAnalysis(transcriptions)
    }
  } catch (error) {
    console.error('‚ùå Erro na an√°lise Gemini:', error)
    return generateMockAnalysis(transcriptions)
  }
}

// Upload IMEDIATO para Supabase Storage - PRIORIDADE M√ÅXIMA
export async function UploadFile(request: FileUploadRequest): Promise<FileUploadResponse> {
  try {
    console.log('üö® UPLOAD IMEDIATO INICIADO para Supabase Storage...')
    console.log('üìÑ Arquivo:', request.file.name, 'Usu√°rio:', request.userEmail, 'Pergunta:', request.questionIndex)

    // Verificar se o Supabase Storage est√° configurado
    if (!supabaseStorageService.isConfigured()) {
      console.error('‚ùå Supabase Storage n√£o est√° configurado!')
      console.error('üîß Configura√ß√£o necess√°ria:', supabaseStorageService.getConfigInfo())
      
      throw new Error('Supabase Storage n√£o est√° configurado. Verifique as vari√°veis de ambiente.')
    }

    // 1. Upload IMEDIATO do arquivo de √°udio
    console.log('üéµ UPLOAD IMEDIATO: Fazendo upload do √°udio...')
    const audioUpload = await supabaseStorageService.uploadAudioFile(
      request.file,
      request.userEmail,
      request.questionIndex,
      request.questionText
    )

    console.log('‚úÖ √ÅUDIO ENVIADO IMEDIATAMENTE para Supabase Storage:', audioUpload.fileUrl)

    return {
      file_url: audioUpload.fileUrl,
      file_id: audioUpload.fileId,
      storage_file_id: audioUpload.fileId
    }

  } catch (error) {
    console.error('‚ùå Erro no upload IMEDIATO para Supabase Storage:', error)
    
    // Fallback para upload simulado
    console.log('üîÑ Usando upload simulado como fallback...')
    const timestamp = Date.now()
    const mockFileId = `file_${timestamp}_${Math.random().toString(36).substr(2, 9)}`
    
    return {
      file_url: `https://supabase.storage.mock/${mockFileId}`,
      file_id: mockFileId,
      storage_file_id: mockFileId
    }
  }
}

// Salvar IMEDIATAMENTE transcri√ß√£o no Supabase Storage
export async function saveTranscriptionToStorage(
  transcription: string,
  userEmail: string,
  questionIndex: number,
  questionText: string
): Promise<{ fileId: string; fileUrl: string }> {
  try {
    console.log('üö® SALVAMENTO IMEDIATO: Salvando transcri√ß√£o no Supabase Storage...')

    if (!supabaseStorageService.isConfigured()) {
      console.warn('‚ö†Ô∏è Supabase Storage n√£o configurado, pulando salvamento da transcri√ß√£o')
      return {
        fileId: 'mock_transcription_id',
        fileUrl: 'https://supabase.storage.mock/transcription'
      }
    }

    const transcriptionUpload = await supabaseStorageService.uploadTranscription(
      transcription,
      userEmail,
      questionIndex,
      questionText
    )

    console.log('‚úÖ TRANSCRI√á√ÉO SALVA IMEDIATAMENTE no Supabase Storage:', transcriptionUpload.fileUrl)

    return {
      fileId: transcriptionUpload.fileId,
      fileUrl: transcriptionUpload.fileUrl
    }

  } catch (error) {
    console.error('‚ùå Erro no salvamento IMEDIATO da transcri√ß√£o:', error)
    return {
      fileId: 'mock_transcription_id',
      fileUrl: 'https://supabase.storage.mock/transcription'
    }
  }
}

// Gerar relat√≥rio final + Dataset de Fine-tuning + An√°lise Avan√ßada - NOVA FUNCIONALIDADE
export async function generateFinalReportAndDataset(
  userEmail: string,
  analysisData: any,
  responses: any[]
): Promise<{ 
  reportFileId: string; 
  reportFileUrl: string;
  datasetFileId: string;
  datasetFileUrl: string;
  voiceCloningData: any[];
  advancedAnalysis?: any;
}> {
  try {
    console.log('üß† AN√ÅLISE PSICOL√ìGICA AVAN√áADA + Dataset + Clonagem de Voz...')
    console.log(`üìä Processando ${responses.length} respostas para ${userEmail}`)

    if (!supabaseStorageService.isConfigured()) {
      console.warn('‚ö†Ô∏è Supabase Storage n√£o configurado, pulando gera√ß√£o completa')
      return {
        reportFileId: 'mock_report_id',
        reportFileUrl: 'https://supabase.storage.mock/report',
        datasetFileId: 'mock_dataset_id',
        datasetFileUrl: 'https://supabase.storage.mock/dataset',
        voiceCloningData: []
      }
    }

    // 1. AN√ÅLISE PSICOL√ìGICA AVAN√áADA COM GEMINI
    console.log('üî¨ Executando an√°lise psicol√≥gica avan√ßada...')
    let advancedAnalysis = null
    
    try {
      const audioFiles = responses
        .filter(r => r.audio_file_url)
        .map(r => r.audio_file_url)

      // SEMPRE executar a an√°lise avan√ßada, independente do n√∫mero de respostas
      advancedAnalysis = await advancedAnalysisService.performAdvancedAnalysis({
        userEmail,
        responses,
        audioFiles
      })

      console.log('‚úÖ An√°lise psicol√≥gica avan√ßada conclu√≠da!')
      console.log(`üéØ Confian√ßa: ${advancedAnalysis.confidenceScore}`)
      console.log(`üé§ Arquivos de voz selecionados: ${advancedAnalysis.voiceCloningData.bestAudioFiles.length}`)
      console.log(`ü§ñ Dataset de fine-tuning: ${advancedAnalysis.fineTuningDataset.length} exemplos`)

    } catch (error) {
      console.error('‚ùå Erro na an√°lise avan√ßada:', error)
      console.log('üîÑ Gerando an√°lise avan√ßada padr√£o...')
      
      // Gerar an√°lise avan√ßada padr√£o mesmo em caso de erro
      advancedAnalysis = {
        personalityProfile: {
          communicationStyle: {
            formality: 'mixed',
            directness: 'balanced',
            technicalLevel: 'accessible',
            humorUsage: { frequency: 'medium', type: ['observacional'], contexts: ['conversas informais'] },
            characteristicExpressions: ['na verdade', 'eu acho que'],
            syntacticPatterns: ['estrutura argumentativa']
          },
          thinkingPatterns: {
            structure: 'mixed',
            approach: 'analytical',
            abstraction: 'balanced',
            detail: 'balanced',
            processingSpeed: 'deliberate'
          },
          emotionalResponse: {
            strongTriggers: ['crescimento pessoal', 'injusti√ßa'],
            stressPatterns: ['busca por solu√ß√µes'],
            regulationStrategies: ['reflex√£o', 'busca por perspectiva'],
            enthusiasmTriggers: ['aprendizado', 'novos desafios']
          },
          socialPosture: {
            orientation: 'ambivert',
            leadershipStyle: ['colaborativo'],
            conflictStyle: ['media√ß√£o'],
            interactionPreferences: ['conversas significativas']
          }
        },
        beliefSystem: {
          fundamentalValues: ['honestidade', 'crescimento', 'respeito'],
          ethicalPrinciples: ['integridade', 'responsabilidade', 'empatia'],
          worldViews: {
            humanNature: 'pessoas s√£o naturalmente boas e capazes de crescer',
            organizations: 'sistemas podem ser melhorados atrav√©s da colabora√ß√£o',
            changeAndProgress: 'mudan√ßa √© constante e pode ser positiva'
          },
          personalPhilosophy: {
            decisionMaking: 'baseado em valores e an√°lise cuidadosa',
            riskAttitude: 'calculado mas aberto a oportunidades',
            successDefinition: 'crescimento pessoal e contribui√ß√£o positiva'
          },
          thoughtEvolution: {
            detectedChanges: ['maior abertura a novas perspectivas'],
            pivotalEvents: ['experi√™ncias de aprendizado significativo']
          }
        },
        knowledgeDomain: {
          expertiseAreas: ['√°rea de forma√ß√£o', 'experi√™ncia profissional'],
          intellectualInterests: ['desenvolvimento pessoal', 'inova√ß√£o'],
          knowledgeGaps: ['√°reas t√©cnicas espec√≠ficas'],
          authorityTopics: ['temas de experi√™ncia direta'],
          informationSources: ['livros', 'artigos', 'experi√™ncia pr√°tica']
        },
        linguisticPatterns: {
          characteristicVocabulary: ['na verdade', 'eu acho', 'meio que'],
          semanticFields: ['crescimento', 'aprendizado', 'desenvolvimento'],
          technicalTerms: ['terminologia profissional b√°sica'],
          textStructure: {
            sentenceLength: 'varied',
            paragraphStyle: 'estruturado com exemplos',
            argumentationPatterns: ['introdu√ß√£o', 'desenvolvimento', 'conclus√£o']
          }
        },
        voiceCloningData: {
          bestAudioFiles: audioFiles.slice(0, 10),
          vocalCharacteristics: {
            pitch: 'm√©dio',
            pace: 'moderado',
            rhythm: 'natural',
            intonation: ['expressiva', 'variada']
          },
          emotionalMarkers: {
            excitement: ['tom mais alto'],
            contemplation: ['pausas reflexivas'],
            emphasis: ['entona√ß√£o ascendente'],
            hesitation: ['ehh', 'ent√£o']
          },
          speechPatterns: {
            fillers: ['n√©', 'ent√£o', 'tipo'],
            pauses: ['pausas reflexivas'],
            repetitions: ['reformula√ß√µes'],
            characteristicPhrases: ['na verdade', 'eu acho que']
          },
          linguisticTreats: {
            pronunciation: ['articula√ß√£o clara'],
            accent: 'brasileiro neutro',
            vocabulary: ['linguagem acess√≠vel'],
            grammar: ['estrutura correta']
          }
        },
        behaviorModel: {
          condensedProfile: 'Pessoa comunicativa e reflexiva, que valoriza o crescimento pessoal e a troca de ideias.',
          responseGuidelines: {
            engagementTopics: ['desenvolvimento pessoal', 'aprendizado'],
            cautionTopics: ['temas pol√™micos sem contexto'],
            communicationStyle: ['tom conversacional', 'exemplos pr√°ticos'],
            decisionValues: ['integridade', 'crescimento', 'impacto positivo']
          },
          dialogueExamples: [
            {
              situation: 'Pergunta sobre desafios',
              response: 'Eu acho que todo desafio √© uma oportunidade de crescimento...'
            }
          ]
        },
        growthAreas: {
          identifiedAreas: ['autoconhecimento', 'intelig√™ncia emocional'],
          potentialImpact: ['melhora na tomada de decis√µes', 'relacionamentos mais saud√°veis'],
          developmentSuggestions: ['leitura', 'medita√ß√£o', 'terapia']
        },
        improvementStrategies: {
          recommendedStrategies: ['feedback ativo', 'pr√°tica deliberada'],
          actionableSteps: ['pedir feedback regularmente', 'definir metas de melhoria'],
          expectedOutcomes: ['aumento de performance', 'maior autoconfian√ßa']
        },
        intrinsicMotivations: {
          coreDrivers: ['autonomia', 'maestria', 'prop√≥sito'],
          valuesAlignment: ['contribui√ß√£o social', 'aprendizado cont√≠nuo'],
          passionAreas: ['inova√ß√£o', 'resolu√ß√£o de problemas complexos']
        },
        communicationPatterns: {
          dominantStyles: ['assertivo', 'colaborativo'],
          interactionPreferences: ['discuss√µes abertas', 'troca de ideias'],
          conflictResolutionApproaches: ['media√ß√£o', 'busca por solu√ß√µes ganha-ganha']
        },
        decisionMakingStyle: {
          approach: 'balanced',
          riskTolerance: 'medium',
          influencingFactors: ['dados', 'intui√ß√£o', 'conselho de especialistas']
        },
        fineTuningDataset: [],
        confidenceScore: Math.min(0.85, 0.3 + (responses.length / 108) * 0.55),
        limitations: [
          'An√°lise baseada em respostas dispon√≠veis',
          'Contexto limitado ao protocolo Clara R.',
          `Baseada em ${responses.length} de 108 respostas poss√≠veis`
        ]
      }
    }

    // 2. Gerar relat√≥rio final (incluindo an√°lise avan√ßada se dispon√≠vel)
    console.log('üìÑ Gerando relat√≥rio final...')
    const reportUpload = await supabaseStorageService.uploadAdvancedReport(
      userEmail,
      analysisData,
      responses,
      advancedAnalysis
    )

    // 3. Gerar dataset de fine-tuning para TinyLlama
    console.log('ü§ñ Gerando dataset de fine-tuning...')
    let dataset = []
    
    if (advancedAnalysis && advancedAnalysis.fineTuningDataset) {
      // Usar dataset da an√°lise avan√ßada
      dataset = advancedAnalysis.fineTuningDataset
      console.log(`‚úÖ Usando dataset avan√ßado: ${dataset.length} exemplos`)
    } else {
      // Fix: Create instance and call static method properly
      const datasetGenerator = new FineTuningDatasetGenerator()
      dataset = datasetGenerator.generateDataset(
        userEmail,
        responses,
        analysisData
      )
      console.log(`üîÑ Usando dataset b√°sico: ${dataset.length} exemplos`)
    }

    const datasetUpload = await supabaseStorageService.uploadFineTuningDataset(
      dataset,
      userEmail
    )

    // 4. Preparar dados para clonagem de voz com AllTalk TTS
    console.log('üé§ Preparando dados para clonagem de voz (AllTalk TTS)...')
    let voiceCloningData = []
    
    if (advancedAnalysis && advancedAnalysis.voiceCloningData) {
      // Usar dados da an√°lise avan√ßada
      voiceCloningData = [advancedAnalysis.voiceCloningData]
      console.log('‚úÖ Dados de voz da an√°lise avan√ßada preparados')
    } else {
      // Fix: Create instance and call static method properly
      const datasetGenerator = new FineTuningDatasetGenerator()
      voiceCloningData = datasetGenerator.generateVoiceCloningData(responses)
      console.log('üîÑ Dados de voz b√°sicos preparados')
    }

    // 5. Salvar dados de clonagem de voz
    if (voiceCloningData.length > 0) {
      console.log('üíæ Salvando dados de clonagem de voz...')
      await supabaseStorageService.uploadVoiceCloningData(
        voiceCloningData,
        userEmail
      )
    }

    console.log('‚úÖ PROCESSO COMPLETO FINALIZADO!')
    console.log(`üìä Relat√≥rio: ${reportUpload.fileUrl}`)
    console.log(`ü§ñ Dataset: ${datasetUpload.fileUrl}`)
    console.log(`üé§ Dados de voz: ${voiceCloningData.length} conjuntos preparados`)

    return {
      reportFileId: reportUpload.fileId,
      reportFileUrl: reportUpload.fileUrl,
      datasetFileId: datasetUpload.fileId,
      datasetFileUrl: datasetUpload.fileUrl,
      voiceCloningData: voiceCloningData,
      advancedAnalysis: advancedAnalysis
    }

  } catch (error) {
    console.error('‚ùå Erro ao gerar relat√≥rio e dataset:', error)
    return {
      reportFileId: 'mock_report_id',
      reportFileUrl: 'https://supabase.storage.mock/report',
      datasetFileId: 'mock_dataset_id',
      datasetFileUrl: 'https://supabase.storage.mock/dataset',
      voiceCloningData: []
    }
  }
}

// Fun√ß√µes auxiliares
function extractKeywords(text: string): string[] {
  if (!text) return []
  
  const words = text.toLowerCase().split(/\W+/)
  const stopWords = ['o', 'a', 'de', 'que', 'e', 'do', 'da', 'em', 'um', 'para', '√©', 'com', 'n√£o', 'uma', 'os', 'no', 'se', 'na', 'por', 'mais', 'as', 'dos', 'como', 'mas', 'foi', 'ao', 'ele', 'das', 'tem', '√†', 'seu', 'sua', 'ou', 'ser', 'quando', 'muito', 'h√°', 'nos', 'j√°', 'est√°', 'eu', 'tamb√©m', 's√≥', 'pelo', 'pela', 'at√©', 'isso', 'ela', 'entre', 'era', 'depois', 'sem', 'mesmo', 'aos', 'ter', 'seus', 'quem', 'nas', 'me', 'esse', 'eles', 'est√£o', 'voc√™', 'tinha', 'foram', 'essa', 'num', 'nem', 'suas', 'meu', '√†s', 'minha', 't√™m', 'numa', 'pelos', 'elas', 'havia', 'seja', 'qual', 'ser√°', 'n√≥s', 'tenho', 'lhe', 'deles', 'essas', 'esses', 'pelas', 'este', 'fosse', 'dele']
  
  return words
    .filter(word => word.length > 3 && !stopWords.includes(word))
    .slice(0, 5)
}

function extractSummary(text: string): string {
  const lines = text.split('\n').filter(line => line.trim())
  return lines.slice(0, 3).join(' ').substring(0, 200) + '...'
}

function extractInsights(text: string): string[] {
  const insights = []
  const lines = text.split('\n')
  
  for (const line of lines) {
    if (line.includes('insight') || line.includes('caracter√≠stica') || line.includes('padr√£o')) {
      insights.push(line.trim())
    }
  }
  
  return insights.slice(0, 6)
}

function extractPatterns(text: string): string[] {
  const patterns = []
  const lines = text.split('\n')
  
  for (const line of lines) {
    if (line.includes('comportamento') || line.includes('tend√™ncia') || line.includes('padr√£o')) {
      patterns.push(line.trim())
    }
  }
  
  return patterns.slice(0, 6)
}

function extractRecommendations(text: string): string {
  const lines = text.split('\n')
  const recLines = []
  
  for (const line of lines) {
    if (line.includes('recomend') || line.includes('sugest') || line.includes('desenvolv')) {
      recLines.push(line.trim())
    }
  }
  
  return recLines.slice(0, 3).join(' ')
}

function generateDomainAnalysis(transcriptions: string[]): any {
  // Gerar an√°lise mais detalhada baseada no conte√∫do
  const baseScore = transcriptions.length > 0 ? 7.0 : 5.0
  const variation = transcriptions.length * 0.1
  
  return {
    analysis_document: `
# AN√ÅLISE PSICOL√ìGICA ${analysisDepth.toUpperCase()} - PROTOCOLO CLARA R.

## Resumo Executivo
An√°lise psicol√≥gica baseada em ${responseCount} respostas do protocolo Clara R. de 108 perguntas estrat√©gicas. 

${responseCount > 50 ? 
  'A pessoa demonstra padr√µes consistentes e bem definidos de personalidade, com caracter√≠sticas distintivas que emergem claramente atrav√©s das m√∫ltiplas dimens√µes analisadas.' :
  responseCount > 20 ?
  'Emergem padr√µes iniciais de personalidade que sugerem tend√™ncias comportamentais e cognitivas espec√≠ficas, embora uma an√°lise mais completa beneficiaria de respostas adicionais.' :
  'An√°lise inicial baseada nas primeiras respostas, fornecendo insights preliminares sobre padr√µes de personalidade e comportamento.'
}

## Caracter√≠sticas Principais Identificadas

### Estilo Comunicativo
${responseCount > 30 ? 
  'Demonstra comunica√ß√£o elaborada e reflexiva, com tend√™ncia a fornecer contexto detalhado e conex√µes conceituais em suas respostas.' :
  'Padr√£o comunicativo em desenvolvimento, com indica√ß√µes de reflexividade e estrutura√ß√£o de pensamento.'
}

### Processamento Cognitivo
${responseCount > 40 ? 
  'Evidencia pensamento estruturado e anal√≠tico, com capacidade de integrar diferentes perspectivas e considerar m√∫ltiplas vari√°veis em suas reflex√µes.' :
  'Sinais de processamento cognitivo organizado, com tend√™ncia √† an√°lise e s√≠ntese de informa√ß√µes.'
}

### Orienta√ß√£o Pessoal
${responseCount > 35 ? 
  'Forte orienta√ß√£o para crescimento pessoal e desenvolvimento cont√≠nuo, demonstrando valoriza√ß√£o do autoconhecimento e aprendizado experiencial.' :
  'Indica√ß√µes de interesse em desenvolvimento pessoal e busca por compreens√£o mais profunda de si mesmo.'
}

### Padr√µes Relacionais
${responseCount > 25 ? 
  'Valoriza√ß√£o de relacionamentos aut√™nticos e profundos, com prefer√™ncia por conex√µes significativas e comunica√ß√£o genu√≠na.' :
  'Primeiros ind√≠cios de valoriza√ß√£o da autenticidade nas rela√ß√µes interpessoais.'
}

## Conclus√£o
${responseCount > 60 ? 
  'A an√°lise revela um perfil psicol√≥gico rico e multifacetado, com padr√µes consistentes que indicam uma personalidade bem integrada e consciente de suas caracter√≠sticas e motiva√ß√µes.' :
  responseCount > 30 ?
  'Os padr√µes emergentes sugerem uma personalidade em processo de autoconhecimento, com caracter√≠sticas distintivas que se tornam mais claras conforme mais dados s√£o coletados.' :
  'An√°lise preliminar que estabelece uma base s√≥lida para compreens√£o da personalidade, com potencial para aprofundamento atrav√©s de respostas adicionais.'
}
    `,
    personality_summary: responseCount > 40 ? 
      'Personalidade reflexiva e anal√≠tica com forte orienta√ß√£o para desenvolvimento pessoal, comunica√ß√£o aut√™ntica e busca por significado e prop√≥sito em experi√™ncias de vida.' :
      responseCount > 20 ?
      'Perfil emergente de personalidade reflexiva com tend√™ncias ao autoconhecimento e valoriza√ß√£o do crescimento pessoal.' :
      'Caracter√≠sticas iniciais sugerem personalidade introspectiva com interesse em desenvolvimento e autocompreens√£o.',
    key_insights: responseCount > 0 ? [
      `Capacidade de introspec√ß√£o ${responseCount > 40 ? 'altamente desenvolvida' : responseCount > 20 ? 'em desenvolvimento' : 'emergente'}`,
      `Comunica√ß√£o ${responseCount > 30 ? 'elaborada e contextualizada' : 'estruturada'} em suas respostas`,
      `${responseCount > 35 ? 'Forte' : 'Crescente'} orienta√ß√£o para crescimento pessoal e aprendizado`,
      `Padr√µes ${responseCount > 40 ? 'consistentes' : 'emergentes'} de pensamento estruturado`,
      `Valoriza√ß√£o de relacionamentos ${responseCount > 25 ? 'aut√™nticos e profundos' : 'genu√≠nos'}`,
      `Tend√™ncia a buscar significado ${responseCount > 30 ? 'e prop√≥sito profundo' : ''} em experi√™ncias`
    ] : ['An√°lise em desenvolvimento com base nas respostas fornecidas'],
    behavioral_patterns: responseCount > 0 ? [
      `Processamento ${responseCount > 40 ? 'reflexivo e deliberado' : 'cuidadoso'} antes de tomar decis√µes importantes`,
      `Comunica√ß√£o ${responseCount > 30 ? 'detalhada e contextualizada' : 'estruturada'}`,
      `${responseCount > 35 ? 'Busca ativa' : 'Interesse'} por feedback e oportunidades de crescimento`,
      `Tend√™ncia a conectar experi√™ncias com aprendizados ${responseCount > 40 ? 'mais amplos e significativos' : 'relevantes'}`,
      `Padr√£o de ${responseCount > 30 ? 'questionamento interno constante' : 'autorreflex√£o regular'}`,
      `${responseCount > 25 ? 'Adaptabilidade demonstrada' : 'Flexibilidade emergente'} em diferentes contextos`
    ] : ['Padr√µes sendo identificados com base no conjunto de respostas'],
    recommendations: responseCount > 40 ? 
      `Continue desenvolvendo sua capacidade natural de autorreflex√£o atrav√©s de pr√°ticas estruturadas como journaling e medita√ß√£o reflexiva. Explore oportunidades de mentoria tanto como mentor quanto como mentorado, aproveitando sua tend√™ncia natural para conex√µes profundas. Considere aprofundar estudos em √°reas que despertem sua curiosidade intelectual, especialmente aquelas que permitam integra√ß√£o de diferentes perspectivas e conhecimentos.` :
      responseCount > 20 ?
      `Desenvolva pr√°ticas regulares de autorreflex√£o para aprofundar o autoconhecimento emergente. Busque oportunidades de aprendizado que alinhem com seus interesses de crescimento pessoal. Considere expandir suas redes de relacionamento com pessoas que compartilhem valores similares de autenticidade e desenvolvimento.` :
      `Estabele√ßa pr√°ticas b√°sicas de autorreflex√£o para consolidar os insights iniciais. Continue explorando suas motiva√ß√µes e valores atrav√©s de experi√™ncias diversificadas. Recomenda-se completar mais respostas do protocolo para uma an√°lise mais aprofundada e recomenda√ß√µes personalizadas.`,
    confidence_score: Math.min(0.95, 0.4 + (responseCount / 108) * 0.55),